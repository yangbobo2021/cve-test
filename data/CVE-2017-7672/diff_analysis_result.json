{
    "before_functions": "public void validate(Object object) throws ValidationException {\n    String fieldName = getFieldName();\n    Object value = this.getFieldValue(fieldName, object);\n\n    // if there is no value - don't do comparison\n    // if a value is required, a required validator should be added to the field\n    if (value == null || value.toString().length() == 0) {\n        return;\n    }\n\n    if (!(value.getClass().equals(String.class)) || !Pattern.compile(getUrlRegex(), Pattern.CASE_INSENSITIVE).matcher(String.valueOf(value).trim()).matches()) {\n        addFieldError(fieldName, object);\n    }\n}\n\npublic String getUrlRegex() {\n    if (StringUtils.isNotEmpty(urlRegexExpression)) {\n        return (String) parse(urlRegexExpression, String.class);\n    } else if (StringUtils.isNotEmpty(urlRegex)) {\n        return urlRegex;\n    } else {\n        return \"^(https?|ftp):\\\\/\\\\/\" +\n                \"(([a-z0-9$_\\\\.\\\\+!\\\\*\\\\'\\\\(\\\\),;\\\\?&=-]|%[0-9a-f]{2})+\" +\n                \"(:([a-z0-9$_\\\\.\\\\+!\\\\*\\\\'\\\\(\\\\),;\\\\?&=-]|%[0-9a-f]{2})+)?\" +\n                \"@)?(#?\" +\n                \")((([a-z0-9]\\\\.|[a-z0-9][a-z0-9-]*[a-z0-9]\\\\.)*\" +\n                \"[a-z][a-z0-9-]*[a-z0-9]\" +\n                \"|((\\\\d|[1-9]\\\\d|1\\\\d{2}|2[0-4][0-9]|25[0-5])\\\\.){3}\" +\n                \"(\\\\d|[1-9]\\\\d|1\\\\d{2}|2[0-4][0-9]|25[0-5])\" +\n                \")(:\\\\d+)?\" +\n                \")(((\\\\/{0,1}([a-z0-9$_\\\\.\\\\+!\\\\*\\\\'\\\\(\\\\),;:@&=-]|%[0-9a-f]{2})*)*\" +\n                \"(\\\\?([a-z0-9$_\\\\.\\\\+!\\\\*\\\\'\\\\(\\\\),;:@&=-]|%[0-9a-f]{2})*)\" +\n                \"?)?)?\" +\n                \"(#([a-z0-9$_\\\\.\\\\+!\\\\*\\\\'\\\\(\\\\),;:@&=-]|%[0-9a-f]{2})*)?\" +\n                \"$\";\n    }\n}\n\npublic void setUrlRegex(String urlRegex) {\n    this.urlRegex = urlRegex;\n}\n",
    "after_functions": "public void validate(Object object) throws ValidationException {\n    String fieldName = getFieldName();\n    Object value = this.getFieldValue(fieldName, object);\n\n    // if there is no value - don't do comparison\n    // if a value is required, a required validator should be added to the field\n    if (value == null || value.toString().length() == 0) {\n        return;\n    }\n\n    String stringValue = String.valueOf(value).trim();\n\n    if (!(value.getClass().equals(String.class)) || !getUrlPattern().matcher(stringValue).matches()) {\n        addFieldError(fieldName, object);\n    }\n}\n\nprotected Pattern getUrlPattern() {\n    if (StringUtils.isNotEmpty(urlRegexExpression)) {\n        String regex = (String) parse(urlRegexExpression, String.class);\n        if (regex == null) {\n            LOG.warn(\"Provided URL Regex expression [{}] was evaluated to null! Falling back to default!\", urlRegexExpression);\n            urlPattern = Pattern.compile(DEFAULT_URL_REGEX, Pattern.CASE_INSENSITIVE);\n        } else {\n            urlPattern = Pattern.compile(regex, Pattern.CASE_INSENSITIVE);\n        }\n    }\n    return urlPattern;\n}\n\npublic String getUrlRegex() {\n    return getUrlPattern().pattern();\n}\n\npublic void setUrlRegex(String urlRegex) {\n    urlPattern = Pattern.compile(urlRegex, Pattern.CASE_INSENSITIVE);\n}\n"
}