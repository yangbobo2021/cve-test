{
    "before_functions": "@Override\npublic User getUser() throws IllegalStateException {\n  Organization org = getOrganization();\n  if (org == null)\n    throw new IllegalStateException(\"No organization is set in security context\");\n\n  User delegatedUser = delegatedUserHolder.get();\n\n  if (delegatedUser != null) {\n    return delegatedUser;\n  }\n\n  Authentication auth = SecurityContextHolder.getContext().getAuthentication();\n  JaxbOrganization jaxbOrganization = JaxbOrganization.fromOrganization(org);\n  if (auth != null) {\n    Object principal = auth.getPrincipal();\n    if ((principal != null) && (principal instanceof UserDetails)) {\n      UserDetails userDetails = (UserDetails) principal;\n\n      User user = null;\n\n      // If user exists, fetch it from the userDirectory\n      if (userDirectory != null) {\n        user = userDirectory.loadUser(userDetails.getUsername());\n        if (user == null) {\n          logger.debug(\n                  \"Authenticated user '{}' could not be found in any of the current UserProviders. Continuing anyway...\",\n                  userDetails.getUsername());\n        }\n      } else {\n        logger.debug(\"No UserDirectory was found when trying to search for user '{}'\", userDetails.getUsername());\n      }\n\n      // Add the roles (authorities) in the security context\n      Set<JaxbRole> roles = new HashSet<JaxbRole>();\n      Collection<? extends GrantedAuthority> authorities = auth.getAuthorities();\n      if (authorities != null) {\n        for (GrantedAuthority ga : authorities) {\n          roles.add(new JaxbRole(ga.getAuthority(), jaxbOrganization));\n        }\n      }\n\n      if (user == null) {\n        // No user was found. Create one to hold the auth information from the security context\n        user = new JaxbUser(userDetails.getUsername(), null, jaxbOrganization, roles);\n      } else {\n        // Combine the existing user with the roles in the security context\n        user = JaxbUser.fromUser(user, roles);\n      }\n\n      // Save the user to retrieve it quicker the next time(s) this method is called (by this thread)\n      delegatedUserHolder.set(user);\n\n      return user;\n    }\n  }\n\n  // Return the anonymous user by default\n  return SecurityUtil.createAnonymousUser(jaxbOrganization);\n}\n",
    "after_functions": "@Override\npublic User getUser() throws IllegalStateException {\n  Organization org = getOrganization();\n  if (org == null)\n    throw new IllegalStateException(\"No organization is set in security context\");\n\n  User delegatedUser = delegatedUserHolder.get();\n\n  Authentication auth = SecurityContextHolder.getContext().getAuthentication();\n  if (auth instanceof AnonymousAuthenticationToken) {\n    return SecurityUtil.createAnonymousUser(org);\n  }\n\n  if (delegatedUser != null) {\n    return delegatedUser;\n  }\n\n  JaxbOrganization jaxbOrganization = JaxbOrganization.fromOrganization(org);\n  if (auth != null) {\n    Object principal = auth.getPrincipal();\n    if ((principal instanceof UserDetails)) {\n      UserDetails userDetails = (UserDetails) principal;\n\n      User user = null;\n\n      // If user exists, fetch it from the userDirectory\n      if (userDirectory != null) {\n        user = userDirectory.loadUser(userDetails.getUsername());\n        if (user == null) {\n          logger.debug(\"Authenticated user '{}' could not be found in any of the current UserProviders. \"\n              + \"Continuing anyway...\", userDetails.getUsername());\n        }\n      } else {\n        logger.debug(\"No UserDirectory was found when trying to search for user '{}'\", userDetails.getUsername());\n      }\n\n      // Add the roles (authorities) in the security context\n      Set<JaxbRole> roles = new HashSet<>();\n      Collection<? extends GrantedAuthority> authorities = auth.getAuthorities();\n      if (authorities != null) {\n        for (GrantedAuthority ga : authorities) {\n          roles.add(new JaxbRole(ga.getAuthority(), jaxbOrganization));\n        }\n      }\n\n      if (user == null) {\n        // No user was found. Create one to hold the auth information from the security context\n        user = new JaxbUser(userDetails.getUsername(), null, jaxbOrganization, roles);\n      } else {\n        // Combine the existing user with the roles in the security context\n        user = JaxbUser.fromUser(user, roles);\n      }\n\n      // Save the user to retrieve it quicker the next time(s) this method is called (by this thread)\n      delegatedUserHolder.set(user);\n\n      return user;\n    }\n  }\n\n  // Return the anonymous user by default\n  return SecurityUtil.createAnonymousUser(jaxbOrganization);\n}\n"
}