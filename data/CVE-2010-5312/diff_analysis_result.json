{
    "before_functions": "_createTitlebar: function() {\n    var uiDialogTitle;\n\n    this.uiDialogTitlebar = $( \"<div>\" )\n        .addClass( \"ui-dialog-titlebar  ui-widget-header ui-corner-all  ui-helper-clearfix\" )\n        .prependTo( this.uiDialog );\n    this._on( this.uiDialogTitlebar, {\n        mousedown: function( event ) {\n            // Don't prevent click on close button (#8838)\n            // Focusing a dialog that is partially scrolled out of view\n            // causes the browser to scroll it into view, preventing the click event\n            if ( !$( event.target ).closest( \".ui-dialog-titlebar-close\" ) ) {\n                // Dialog isn't getting focus when dragging (#8063)\n                this.uiDialog.focus();\n            }\n        }\n    });\n\n    this.uiDialogTitlebarClose = $( \"<button></button>\" )\n        .button({\n            label: this.options.closeText,\n            icons: {\n                primary: \"ui-icon-closethick\"\n            },\n            text: false\n        })\n        .addClass( \"ui-dialog-titlebar-close\" )\n        .appendTo( this.uiDialogTitlebar );\n    this._on( this.uiDialogTitlebarClose, {\n        \"click\": function( event ) {\n            event.preventDefault();\n            this.close( event );\n        }\n    });\n\n    uiDialogTitle = $( \"<span>\" )\n        .uniqueId()\n        .addClass( \"ui-dialog-title\" )\n        .html( this.options.title || \"&#160;\" )\n        .prependTo( this.uiDialogTitlebar );\n\n    this.uiDialog.attr({\n        \"aria-labelledby\": uiDialogTitle.attr( \"id\" )\n    });\n}\n",
    "after_functions": "_createTitlebar: function() {\n    var uiDialogTitle;\n\n    this.uiDialogTitlebar = $( \"<div>\" )\n        .addClass( \"ui-dialog-titlebar  ui-widget-header ui-corner-all  ui-helper-clearfix\" )\n        .prependTo( this.uiDialog );\n    this._on( this.uiDialogTitlebar, {\n        mousedown: function( event ) {\n            // Don't prevent click on close button (#8838)\n            // Focusing a dialog that is partially scrolled out of view\n            // causes the browser to scroll it into view, preventing the click event\n            if ( !$( event.target ).closest( \".ui-dialog-titlebar-close\" ) ) {\n                // Dialog isn't getting focus when dragging (#8063)\n                this.uiDialog.focus();\n            }\n        }\n    });\n\n    this.uiDialogTitlebarClose = $( \"<button></button>\" )\n        .button({\n            label: this.options.closeText,\n            icons: {\n                primary: \"ui-icon-closethick\"\n            },\n            text: false\n        })\n        .addClass( \"ui-dialog-titlebar-close\" )\n        .appendTo( this.uiDialogTitlebar );\n    this._on( this.uiDialogTitlebarClose, {\n        \"click\": function( event ) {\n            event.preventDefault();\n            this.close( event );\n        }\n    });\n\n    uiDialogTitle = $( \"<span>\" )\n        .uniqueId()\n        .addClass( \"ui-dialog-title\" )\n        .prependTo( this.uiDialogTitlebar );\n    this._title( uiDialogTitle );\n\n    this.uiDialog.attr({\n        \"aria-labelledby\": uiDialogTitle.attr( \"id\" )\n    });\n}\n\n_title: function( title ) {\n    if ( !this.options.title ) {\n        title.html( \"&#160;\" );\n    }\n    title.text( this.options.title );\n}\n\n_setOption: function( key, value ) {\n    var isDraggable, isResizable,\n        uiDialog = this.uiDialog;\n\n    if ( key === \"dialogClass\" ) {\n        uiDialog\n            .removeClass( this.options.dialogClass )\n            .addClass( value );\n    }\n\n    if ( key === \"disabled\" ) {\n        return;\n    }\n\n    this._super( key, value );\n\n    if ( key === \"buttons\" ) {\n        this._createButtons();\n    }\n\n    if ( key === \"closeText\" ) {\n        this.uiDialogTitlebarClose.button({\n            // ensure that we always pass a string\n            label: \"\" + value\n        });\n    }\n\n    if ( key === \"draggable\" ) {\n        isDraggable = uiDialog.is( \":data(ui-draggable)\" );\n        if ( isDraggable && !value ) {\n            uiDialog.draggable( \"destroy\" );\n        }\n\n        if ( !isDraggable && value ) {\n            this._makeDraggable();\n        }\n    }\n\n    if ( key === \"position\" ) {\n        this._position();\n    }\n\n    if ( key === \"resizable\" ) {\n        // currently resizable, becoming non-resizable\n        isResizable = uiDialog.is( \":data(ui-resizable)\" );\n        if ( isResizable && !value ) {\n            uiDialog.resizable( \"destroy\" );\n        }\n\n        // currently resizable, changing handles\n        if ( isResizable && typeof value === \"string\" ) {\n            uiDialog.resizable( \"option\", \"handles\", value );\n        }\n\n        // currently non-resizable, becoming resizable\n        if ( !isResizable && value !== false ) {\n            this._makeResizable();\n        }\n    }\n\n    if ( key === \"title\" ) {\n        this._title( this.uiDialogTitlebar.find( \".ui-dialog-title\" ) );\n    }\n}\n"
}