{
    "general_rule": "Refactor Repetitive Conditional Logic\n\n1. Look for repeated conditional checks or similar logic patterns within functions or methods.\n\n2. Extract the common logic into a separate helper function or method.\n\n3. Replace the repetitive code with calls to the new helper function.\n\n4. Pass any variable parts as parameters to the helper function.\n\nBenefits:\n- Improves code readability and maintainability\n- Reduces duplication and potential for inconsistencies \n- Makes the code more modular and easier to update\n\nHow to identify:\n- Review functions/methods for similar conditional blocks or logic patterns\n- Look for copy-pasted code segments with minor variations\n- Check for repeated boolean expressions or calculations\n\nThis refactoring can be applied across different languages and frameworks to simplify complex logic and improve overall code quality."
}