{
    "before_functions": "private Assertion validateSaml2Response(Saml2AuthenticationToken token,\n\t\t\t\t\t\t\t\t\t\t\tString recipient,\n\t\t\t\t\t\t\t\t\t\t\tResponse samlResponse) throws Saml2AuthenticationException {\n\t//optional validation if the response contains a destination\n\tif (hasText(samlResponse.getDestination()) && !recipient.equals(samlResponse.getDestination())) {\n\t\tthrow authException(INVALID_DESTINATION, \"Invalid SAML response destination: \" + samlResponse.getDestination());\n\t}\n\n\tString issuer = samlResponse.getIssuer().getValue();\n\tif (logger.isDebugEnabled()) {\n\t\tlogger.debug(\"Validating SAML response from \" + issuer);\n\t}\n\tif (!hasText(issuer) || (!issuer.equals(token.getIdpEntityId()))) {\n\t\tString message = String.format(\"Response issuer '%s' doesn't match '%s'\", issuer, token.getIdpEntityId());\n\t\tthrow authException(INVALID_ISSUER, message);\n\t}\n\tSaml2AuthenticationException lastValidationError = null;\n\n\tboolean responseSigned = hasValidSignature(samlResponse, token);\n\tfor (Assertion a : samlResponse.getAssertions()) {\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tlogger.debug(\"Checking plain assertion validity \" + a);\n\t\t}\n\t\ttry {\n\t\t\tvalidateAssertion(recipient, a, token, !responseSigned);\n\t\t\treturn a;\n\t\t} catch (Saml2AuthenticationException e) {\n\t\t\tlastValidationError = e;\n\t\t}\n\t}\n\tfor (EncryptedAssertion ea : samlResponse.getEncryptedAssertions()) {\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tlogger.debug(\"Checking encrypted assertion validity \" + ea);\n\t\t}\n\t\ttry {\n\t\t\tAssertion a = decrypt(token, ea);\n\t\t\tvalidateAssertion(recipient, a, token, !responseSigned);\n\t\t\treturn a;\n\t\t} catch (Saml2AuthenticationException e) {\n\t\t\tlastValidationError = e;\n\t\t}\n\t}\n\tif (lastValidationError != null) {\n\t\tthrow lastValidationError;\n\t}\n\telse {\n\t\tthrow authException(MALFORMED_RESPONSE_DATA, \"No assertions found in response.\");\n\t}\n}\n",
    "after_functions": "private List<Assertion> validateResponse(Saml2AuthenticationToken token, Response response)\n\t\tthrows Saml2AuthenticationException {\n\n\tList<Assertion> validAssertions = new ArrayList<>();\n\tString issuer = response.getIssuer().getValue();\n\tif (logger.isDebugEnabled()) {\n\t\tlogger.debug(\"Validating SAML response from \" + issuer);\n\t}\n\n\tList<Assertion> assertions = new ArrayList<>(response.getAssertions());\n\tfor (EncryptedAssertion encryptedAssertion : response.getEncryptedAssertions()) {\n\t\tAssertion assertion = decrypt(token, encryptedAssertion);\n\t\tassertions.add(assertion);\n\t}\n\tif (assertions.isEmpty()) {\n\t\tthrow authException(MALFORMED_RESPONSE_DATA, \"No assertions found in response.\");\n\t}\n\n\tif (!isSigned(response, assertions)) {\n\t\tthrow authException(INVALID_SIGNATURE, \"Either the response or one of the assertions is unsigned. \" +\n\t\t\t\t\"Please either sign the response or all of the assertions.\");\n\t}\n\n\tSignatureTrustEngine signatureTrustEngine = buildSignatureTrustEngine(token);\n\n\tMap<String, Saml2AuthenticationException> validationExceptions = new HashMap<>();\n\tif (response.isSigned()) {\n\t\tSAMLSignatureProfileValidator profileValidator = new SAMLSignatureProfileValidator();\n\t\ttry {\n\t\t\tprofileValidator.validate(response.getSignature());\n\t\t} catch (Exception e) {\n\t\t\tvalidationExceptions.put(INVALID_SIGNATURE, authException(INVALID_SIGNATURE,\n\t\t\t\t\t\"Invalid signature for SAML Response [\" + response.getID() + \"]\", e));\n\t\t}\n\n\t\ttry {\n\t\t\tCriteriaSet criteriaSet = new CriteriaSet();\n\t\t\tcriteriaSet.add(new EvaluableEntityIDCredentialCriterion(new EntityIdCriterion(issuer)));\n\t\t\tcriteriaSet.add(new EvaluableProtocolRoleDescriptorCriterion(new ProtocolCriterion(SAMLConstants.SAML20P_NS)));\n\t\t\tcriteriaSet.add(new EvaluableUsageCredentialCriterion(new UsageCriterion(UsageType.SIGNING)));\n\t\t\tif (!signatureTrustEngine.validate(response.getSignature(), criteriaSet)) {\n\t\t\t\tvalidationExceptions.put(INVALID_SIGNATURE, authException(INVALID_SIGNATURE,\n\t\t\t\t\t\t\"Invalid signature for SAML Response [\" + response.getID() + \"]\"));\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tvalidationExceptions.put(INVALID_SIGNATURE, authException(INVALID_SIGNATURE,\n\t\t\t\t\t\"Invalid signature for SAML Response [\" + response.getID() + \"]\", e));\n\t\t}\n\t}\n\n\tString destination = response.getDestination();\n\tif (StringUtils.hasText(destination) && !destination.equals(token.getRecipientUri())) {\n\t\tString message = \"Invalid destination [\" + destination + \"] for SAML response [\" + response.getID() + \"]\";\n\t\tvalidationExceptions.put(INVALID_DESTINATION, authException(INVALID_DESTINATION, message));\n\t}\n\n\tif (!StringUtils.hasText(issuer) || !issuer.equals(token.getIdpEntityId())) {\n\t\tString message = String.format(\"Invalid issuer [%s] for SAML response [%s]\", issuer, response.getID());\n\t\tvalidationExceptions.put(INVALID_ISSUER, authException(INVALID_ISSUER, message));\n\t}\n\n\tSAML20AssertionValidator validator = buildSamlAssertionValidator(signatureTrustEngine);\n\tValidationContext context = buildValidationContext(token, response);\n\n\tif (logger.isDebugEnabled()) {\n\t\tlogger.debug(\"Validating \" + assertions.size() + \" assertions\");\n\t}\n\tfor (Assertion assertion : assertions) {\n\t\tif (logger.isTraceEnabled()) {\n\t\t\tlogger.trace(\"Validating assertion \" + assertion.getID());\n\t\t}\n\t\ttry {\n\t\t\tvalidAssertions.add(validateAssertion(assertion, validator, context));\n\t\t} catch (Exception e) {\n\t\t\tString message = String.format(\"Invalid assertion [%s] for SAML response [%s]\", assertion.getID(), response.getID());\n\t\t\tvalidationExceptions.put(INVALID_ASSERTION, authException(INVALID_ASSERTION, message, e));\n\t\t}\n\t}\n\n\tif (validationExceptions.isEmpty()) {\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tlogger.debug(\"Successfully validated SAML Response [\" + response.getID() + \"]\");\n\t\t}\n\t} else {\n\t\tif (logger.isTraceEnabled()) {\n\t\t\tlogger.debug(\"Found \" + validationExceptions.size() + \" validation errors in SAML response [\" + response.getID() + \"]: \" +\n\t\t\t\t\tvalidationExceptions.values());\n\t\t} else if (logger.isDebugEnabled()) {\n\t\t\tlogger.debug(\"Found \" + validationExceptions.size() + \" validation errors in SAML response [\" + response.getID() + \"]\");\n\t\t}\n\t}\n\n\tif (!validationExceptions.isEmpty()) {\n\t\tthrow validationExceptions.values().iterator().next();\n\t}\n\tif (validAssertions.isEmpty()) {\n\t\tthrow authException(MALFORMED_RESPONSE_DATA, \"No valid assertions found in response.\");\n\t}\n\n\treturn validAssertions;\n}\n"
}