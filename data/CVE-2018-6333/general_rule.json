{
    "general_rule": "Rule: Implement Input Validation for User-Supplied Data\n\n1. Type of improvement:\n   Adding validation checks for user-supplied input before processing it further in the application.\n\n2. Benefits:\n   - Enhances security by preventing potential attacks or unexpected behavior caused by malformed input\n   - Improves application stability by catching and handling invalid data early\n   - Reduces the risk of errors propagating through the system\n   - Provides clearer error messages to users, improving the overall user experience\n\n3. How to identify similar opportunities:\n   - Look for functions or methods that accept external input, especially from user interfaces or API endpoints\n   - Examine areas where data is parsed, converted, or used to construct file paths, database queries, or command-line arguments\n   - Review code that interacts with external systems or resources using user-provided information\n\n4. General implementation guidelines:\n   - Validate input data as early as possible in the processing chain\n   - Check for correct data types, formats, and value ranges\n   - Use regular expressions or predefined rules to ensure input adheres to expected patterns\n   - Sanitize input by removing or escaping potentially harmful characters\n   - Implement proper error handling and provide meaningful error messages when validation fails\n   - Consider using input validation libraries or frameworks specific to your programming language or platform\n   - Apply the principle of least privilege by restricting input to only what is necessary for the operation"
}