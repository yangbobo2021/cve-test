{
    "before_functions": "@PreAuthorize(\"hasRole('ROLE_USER')\")\n@RequestMapping(\"/oauth/confirm_access\")\npublic String confimAccess(Map<String, Object> model, @ModelAttribute(\"authorizationRequest\") AuthorizationRequest authRequest,\n        Principal p) {\n\n    // Check the \"prompt\" parameter to see if we need to do special processing\n\n    String prompt = (String)authRequest.getExtensions().get(PROMPT);\n    List<String> prompts = Splitter.on(PROMPT_SEPARATOR).splitToList(Strings.nullToEmpty(prompt));\n    ClientDetailsEntity client = null;\n\n    try {\n        client = clientService.loadClientByClientId(authRequest.getClientId());\n    } catch (OAuth2Exception e) {\n        logger.error(\"confirmAccess: OAuth2Exception was thrown when attempting to load client\", e);\n        model.put(HttpCodeView.CODE, HttpStatus.BAD_REQUEST);\n        return HttpCodeView.VIEWNAME;\n    } catch (IllegalArgumentException e) {\n        logger.error(\"confirmAccess: IllegalArgumentException was thrown when attempting to load client\", e);\n        model.put(HttpCodeView.CODE, HttpStatus.BAD_REQUEST);\n        return HttpCodeView.VIEWNAME;\n    }\n\n    if (client == null) {\n        logger.error(\"confirmAccess: could not find client \" + authRequest.getClientId());\n        model.put(HttpCodeView.CODE, HttpStatus.NOT_FOUND);\n        return HttpCodeView.VIEWNAME;\n    }\n\n    if (prompts.contains(\"none\")) {\n        // if we've got a redirect URI then we'll send it\n\n        String url = redirectResolver.resolveRedirect(authRequest.getRedirectUri(), client);\n\n        try {\n            URIBuilder uriBuilder = new URIBuilder(url);\n\n            uriBuilder.addParameter(\"error\", \"interaction_required\");\n            if (!Strings.isNullOrEmpty(authRequest.getState())) {\n                uriBuilder.addParameter(\"state\", authRequest.getState()); // copy the state parameter if one was given\n            }\n\n            return \"redirect:\" + uriBuilder.toString();\n\n        } catch (URISyntaxException e) {\n            logger.error(\"Can't build redirect URI for prompt=none, sending error instead\", e);\n            model.put(\"code\", HttpStatus.FORBIDDEN);\n            return HttpCodeView.VIEWNAME;\n        }\n    }\n\n    model.put(\"auth_request\", authRequest);\n    model.put(\"client\", client);\n\n    String redirect_uri = authRequest.getRedirectUri();\n\n    model.put(\"redirect_uri\", redirect_uri);\n\n\n    // pre-process the scopes\n    Set<SystemScope> scopes = scopeService.fromStrings(authRequest.getScope());\n\n    Set<SystemScope> sortedScopes = new LinkedHashSet<>(scopes.size());\n    Set<SystemScope> systemScopes = scopeService.getAll();\n\n    // sort scopes for display based on the inherent order of system scopes\n    for (SystemScope s : systemScopes) {\n        if (scopes.contains(s)) {\n            sortedScopes.add(s);\n        }\n    }\n\n    // add in any scopes that aren't system scopes to the end of the list\n    sortedScopes.addAll(Sets.difference(scopes, systemScopes));\n\n    model.put(\"scopes\", sortedScopes);\n\n    // get the userinfo claims for each scope\n    UserInfo user = userInfoService.getByUsername(p.getName());\n    Map<String, Map<String, String>> claimsForScopes = new HashMap<>();\n    if (user != null) {\n        JsonObject userJson = user.toJson();\n\n        for (SystemScope systemScope : sortedScopes) {\n            Map<String, String> claimValues = new HashMap<>();\n\n            Set<String> claims = scopeClaimTranslationService.getClaimsForScope(systemScope.getValue());\n            for (String claim : claims) {\n                if (userJson.has(claim) && userJson.get(claim).isJsonPrimitive()) {\n                    // TODO: this skips the address claim\n                    claimValues.put(claim, userJson.get(claim).getAsString());\n                }\n            }\n\n            claimsForScopes.put(systemScope.getValue(), claimValues);\n        }\n    }\n\n    model.put(\"claims\", claimsForScopes);\n\n    // client stats\n    Integer count = statsService.getCountForClientId(client.getClientId()).getApprovedSiteCount();\n    model.put(\"count\", count);\n\n\n    // contacts\n    if (client.getContacts() != null) {\n        String contacts = Joiner.on(\", \").join(client.getContacts());\n        model.put(\"contacts\", contacts);\n    }\n\n    // if the client is over a week old and has more than one registration, don't give such a big warning\n    // instead, tag as \"Generally Recognized As Safe\" (gras)\n    Date lastWeek = new Date(System.currentTimeMillis() - (60 * 60 * 24 * 7 * 1000));\n    if (count > 1 && client.getCreatedAt() != null && client.getCreatedAt().before(lastWeek)) {\n        model.put(\"gras\", true);\n    } else {\n        model.put(\"gras\", false);\n    }\n\n    return \"approve\";\n}\n",
    "after_functions": "@PreAuthorize(\"hasRole('ROLE_USER')\")\n@RequestMapping(\"/oauth/confirm_access\")\npublic String confirmAccess(Map<String, Object> model, Principal p) {\n\n    AuthorizationRequest authRequest = (AuthorizationRequest) model.get(\"authorizationRequest\");\n    // Check the \"prompt\" parameter to see if we need to do special processing\n\n    String prompt = (String)authRequest.getExtensions().get(PROMPT);\n    List<String> prompts = Splitter.on(PROMPT_SEPARATOR).splitToList(Strings.nullToEmpty(prompt));\n    ClientDetailsEntity client = null;\n\n    try {\n        client = clientService.loadClientByClientId(authRequest.getClientId());\n    } catch (OAuth2Exception e) {\n        logger.error(\"confirmAccess: OAuth2Exception was thrown when attempting to load client\", e);\n        model.put(HttpCodeView.CODE, HttpStatus.BAD_REQUEST);\n        return HttpCodeView.VIEWNAME;\n    } catch (IllegalArgumentException e) {\n        logger.error(\"confirmAccess: IllegalArgumentException was thrown when attempting to load client\", e);\n        model.put(HttpCodeView.CODE, HttpStatus.BAD_REQUEST);\n        return HttpCodeView.VIEWNAME;\n    }\n\n    if (client == null) {\n        logger.error(\"confirmAccess: could not find client \" + authRequest.getClientId());\n        model.put(HttpCodeView.CODE, HttpStatus.NOT_FOUND);\n        return HttpCodeView.VIEWNAME;\n    }\n\n    if (prompts.contains(\"none\")) {\n        // if we've got a redirect URI then we'll send it\n\n        String url = redirectResolver.resolveRedirect(authRequest.getRedirectUri(), client);\n\n        try {\n            URIBuilder uriBuilder = new URIBuilder(url);\n\n            uriBuilder.addParameter(\"error\", \"interaction_required\");\n            if (!Strings.isNullOrEmpty(authRequest.getState())) {\n                uriBuilder.addParameter(\"state\", authRequest.getState()); // copy the state parameter if one was given\n            }\n\n            return \"redirect:\" + uriBuilder.toString();\n\n        } catch (URISyntaxException e) {\n            logger.error(\"Can't build redirect URI for prompt=none, sending error instead\", e);\n            model.put(\"code\", HttpStatus.FORBIDDEN);\n            return HttpCodeView.VIEWNAME;\n        }\n    }\n\n    model.put(\"auth_request\", authRequest);\n    model.put(\"client\", client);\n\n    String redirect_uri = authRequest.getRedirectUri();\n\n    model.put(\"redirect_uri\", redirect_uri);\n\n\n    // pre-process the scopes\n    Set<SystemScope> scopes = scopeService.fromStrings(authRequest.getScope());\n\n    Set<SystemScope> sortedScopes = new LinkedHashSet<>(scopes.size());\n    Set<SystemScope> systemScopes = scopeService.getAll();\n\n    // sort scopes for display based on the inherent order of system scopes\n    for (SystemScope s : systemScopes) {\n        if (scopes.contains(s)) {\n            sortedScopes.add(s);\n        }\n    }\n\n    // add in any scopes that aren't system scopes to the end of the list\n    sortedScopes.addAll(Sets.difference(scopes, systemScopes));\n\n    model.put(\"scopes\", sortedScopes);\n\n    // get the userinfo claims for each scope\n    UserInfo user = userInfoService.getByUsername(p.getName());\n    Map<String, Map<String, String>> claimsForScopes = new HashMap<>();\n    if (user != null) {\n        JsonObject userJson = user.toJson();\n\n        for (SystemScope systemScope : sortedScopes) {\n            Map<String, String> claimValues = new HashMap<>();\n\n            Set<String> claims = scopeClaimTranslationService.getClaimsForScope(systemScope.getValue());\n            for (String claim : claims) {\n                if (userJson.has(claim) && userJson.get(claim).isJsonPrimitive()) {\n                    // TODO: this skips the address claim\n                    claimValues.put(claim, userJson.get(claim).getAsString());\n                }\n            }\n\n            claimsForScopes.put(systemScope.getValue(), claimValues);\n        }\n    }\n\n    model.put(\"claims\", claimsForScopes);\n\n    // client stats\n    Integer count = statsService.getCountForClientId(client.getClientId()).getApprovedSiteCount();\n    model.put(\"count\", count);\n\n\n    // contacts\n    if (client.getContacts() != null) {\n        String contacts = Joiner.on(\", \").join(client.getContacts());\n        model.put(\"contacts\", contacts);\n    }\n\n    // if the client is over a week old and has more than one registration, don't give such a big warning\n    // instead, tag as \"Generally Recognized As Safe\" (gras)\n    Date lastWeek = new Date(System.currentTimeMillis() - (60 * 60 * 24 * 7 * 1000));\n    if (count > 1 && client.getCreatedAt() != null && client.getCreatedAt().before(lastWeek)) {\n        model.put(\"gras\", true);\n    } else {\n        model.put(\"gras\", false);\n    }\n\n    return \"approve\";\n}\n"
}