{
    "general_rule": "Rule: Simplify Method Signatures and Leverage Existing Context\n\n1. Type of Improvement:\n   Reduce the number of parameters in method signatures by leveraging existing context or state.\n\n2. Benefits:\n   - Improves code readability and maintainability\n   - Reduces the complexity of method calls\n   - Minimizes the risk of errors when passing arguments\n   - Encourages better encapsulation and use of object-oriented principles\n\n3. How to Identify Similar Opportunities:\n   - Look for methods with many parameters, especially those of the same type\n   - Identify parameters that are frequently passed together across multiple method calls\n   - Check for parameters that can be derived from the current object's state or context\n   - Review methods in controller classes that handle web requests, as they often have access to additional context\n\n4. General Application:\n   - Examine the method's containing class and its dependencies for relevant information\n   - Consider using class fields, dependency injection, or context objects to store commonly used data\n   - Refactor methods to use the class's state or injected dependencies instead of passing everything as parameters\n   - In web applications, leverage request scopes, sessions, or other contextual objects to access shared data\n   - Be mindful of maintaining clear method contracts and avoiding hidden dependencies\n\nBy applying this rule, developers can create more concise and maintainable code across various projects and programming languages, leading to improved overall code quality and reduced complexity."
}