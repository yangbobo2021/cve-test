{
    "before_functions": "case 'GET': // returns file or directory contents\n    console.log('relativePath: ' + relativePath);\n    if(url === 'favicon.ico') { \t\n        res.end(); // if the browser requests favicon, just return an empty response\n    } else {\n        fs.stat(relativePath, function(err, stats) { // determine if the resource is a file or directory\n            if(err) { writeError(err); } \n            else {\n                if(stats.isDirectory()) {\n                    res.setHeader('Last-Modified', stats.mtime);\t\t\t\t\t\t\t\n                    res.setHeader(\"Expires\", \"Sat, 01 Jan 2000 00:00:00 GMT\");\n                    res.setHeader(\"Cache-Control\", \"no-store, no-cache, must-revalidate, max-age=0\");\n                    res.setHeader(\"Cache-Control\", \"post-check=0, pre-check=0\");\n                    res.setHeader(\"Pragma\", \"no-cache\");\n                    // if it's a directory, return the files as a JSONified array\n                    console.log('reading directory ' + relativePath);\n                    fs.readdir(relativePath, function(err, files) {\n                        if(err) { \n                            console.log('writeError');\n                            writeError(err); \n                        }\n                        else {\n                            var results = [];\n                            var search = {};\n                            search.stats = function(files) {\n                                if(files.length) { \n                                    var file = files.shift();\n                                    fs.stat(relativePath + '/' + file, function(err, stats) { \n                                        if(err) { writeError(err); } \n                                        else {\n                                            stats.name = file;\n                                            stats.isFile = stats.isFile();\n                                            stats.isDirectory = stats.isDirectory();\n                                            stats.isBlockDevice = stats.isBlockDevice();\n                                            stats.isFIFO = stats.isFIFO();\n                                            stats.isSocket = stats.isSocket();\n                                            results.push(stats);\n                                            search.stats(files);\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n                                        }\n                                    });\n                                } else {\n                                    if(query.type == 'json' || query.dir == 'json') {\n                                        res.setHeader('Content-Type', 'application/json');\n                                        res.write(JSON.stringify(results)); \n                                        res.end();\n                                    } else { \n                                        res.setHeader('Content-Type', 'text/html');\t\t\t\t\t\t\t\t\t\t\t\n                                        res.write('<html><body>');\n                                        for(var f = 0; f < results.length; f++) {\n                                            var name = results[f].name;\n                                            var normalized = url + '/' + name;\n                                            while(normalized[0] == '/') { normalized = normalized.slice(1, normalized.length); }\n                                            res.write('\\r\\n<p><a href=\"/' + normalized + '\">' + name + '</a></p>');\n                                        }\n                                        res.end('\\r\\n</body></html>');\n                                    }\n                                }\n                            };\n                            search.stats(files);\n                        }\n                    });\n                } else {\n                    // if it's a file, return the contents of a file with the correct content type\n                    console.log('reading file ' + relativePath);\n                    if(query.type == 'json' || query.dir == 'json') {\n                        var type = 'application/json';\n                        res.setHeader('Content-Type', type);\n                        fs.readFile(relativePath, function(err, data) { \n                            if(err) { writeError(err); }\n                            else {\n                                res.end(JSON.stringify({ \n                                    data: data.toString(),\n                                    type: require('mime').lookup(relativePath),\n                                })); \n                            }\n                        });\n                    } else {\n                        var type = require('mime').lookup(relativePath);\n                        res.setHeader('Content-Type', type);\n                        fs.readFile(relativePath, function(err, data) { \n                            if(err) { writeError(err); }\n                            else {\n                                res.setHeader('Content-Length', data.length);\n                                res.end(data); \n                            }\n                        });\n                    }\n                }\n            }\n        });\n    }\n    return;\n",
    "after_functions": "case 'GET': // returns file or directory contents\n    console.log('relativePath: ' + relativePath);\n    if(url === 'favicon.ico') { \t\n        res.end(); // if the browser requests favicon, just return an empty response\n    } else {\n        fs.stat(relativePath, function(err, stats) { // determine if the resource is a file or directory\n            if(err) { writeError(err); } \n            else {\n                if(stats.isDirectory()) {\n                    res.setHeader('Last-Modified', stats.mtime);\t\t\t\t\t\t\t\n                    res.setHeader(\"Expires\", \"Sat, 01 Jan 2000 00:00:00 GMT\");\n                    res.setHeader(\"Cache-Control\", \"no-store, no-cache, must-revalidate, max-age=0\");\n                    res.setHeader(\"Cache-Control\", \"post-check=0, pre-check=0\");\n                    res.setHeader(\"Pragma\", \"no-cache\");\n                    // if it's a directory, return the files as a JSONified array\n                    console.log('reading directory ' + relativePath);\n                    fs.readdir(relativePath, function(err, files) {\n                        if(err) { \n                            console.log('writeError');\n                            writeError(err); \n                        }\n                        else {\n                            var results = [];\n                            var search = {};\n                            search.stats = function(files) {\n                                if(files.length) { \n                                    var file = files.shift();\n                                    fs.stat(relativePath + '/' + file, function(err, stats) { \n                                        if(err) { writeError(err); } \n                                        else {\n                                            stats.name = file;\n                                            stats.isFile = stats.isFile();\n                                            stats.isDirectory = stats.isDirectory();\n                                            stats.isBlockDevice = stats.isBlockDevice();\n                                            stats.isFIFO = stats.isFIFO();\n                                            stats.isSocket = stats.isSocket();\n                                            results.push(stats);\n                                            search.stats(files);\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n                                        }\n                                    });\n                                } else {\n                                    if(query.type == 'json' || query.dir == 'json') {\n                                        res.setHeader('Content-Type', 'application/json');\n                                        res.write(JSON.stringify(results)); \n                                        res.end();\n                                    } else { \n                                        res.setHeader('Content-Type', 'text/html');\t\t\t\t\t\t\t\t\t\t\t\n                                        res.write('<html><body>');\n                                        for(var f = 0; f < results.length; f++) {\n                                            var name = results[f].name;\n                                            var normalized = url + '/' + name;\n                                            while(normalized[0] == '/') { normalized = normalized.slice(1, normalized.length); }\n                                            if(normalized.indexOf('\"') >= 0) throw new Error('unsupported file name')\n                                            name = name.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n                                            res.write('\\r\\n<p><a href=\"/' + normalized + '\"><span>' + name + '</span></a></p>');\n                                        }\n                                        res.end('\\r\\n</body></html>');\n                                    }\n                                }\n                            };\n                            search.stats(files);\n                        }\n                    });\n                } else {\n                    // if it's a file, return the contents of a file with the correct content type\n                    console.log('reading file ' + relativePath);\n                    if(query.type == 'json' || query.dir == 'json') {\n                        var type = 'application/json';\n                        res.setHeader('Content-Type', type);\n                        fs.readFile(relativePath, function(err, data) { \n                            if(err) { writeError(err); }\n                            else {\n                                res.end(JSON.stringify({ \n                                    data: data.toString(),\n                                    type: require('mime').lookup(relativePath),\n                                })); \n                            }\n                        });\n                    } else {\n                        var type = require('mime').lookup(relativePath);\n                        res.setHeader('Content-Type', type);\n                        fs.readFile(relativePath, function(err, data) { \n                            if(err) { writeError(err); }\n                            else {\n                                res.setHeader('Content-Length', data.length);\n                                res.end(data); \n                            }\n                        });\n                    }\n                }\n            }\n        });\n    }\n    return;\n"
}