{
    "before_functions": "public static OMElement buildOMElement(String payload) throws RegistryException {\n    OMElement element;\n    try {\n        element = AXIOMUtil.stringToOM(payload);\n        element.build();\n    } catch (Exception e) {\n        String message = \"Unable to parse the XML configuration. Please validate the XML configuration\";\n        log.error(message,e);\n        throw new RegistryException(message,e);\n    }\n    return element;\n}\n\npublic static boolean generateAspect(String resourceFullPath, Registry registry) throws RegistryException, XMLStreamException {\n    RegistryContext registryContext = registry.getRegistryContext();\n    if (registryContext == null) {\n        return false;\n    }\n    Resource resource = registry.get(resourceFullPath);\n    if (resource != null) {\n        String content = null;\n        if (resource.getContent() != null) {\n            content = RegistryUtils.decodeBytes((byte[])resource.getContent());\n        }\n        if (content != null) {\n            OMElement aspect = AXIOMUtil.stringToOM(content);\n            if (aspect != null) {\n                OMElement dummy = OMAbstractFactory.getOMFactory().createOMElement(\"dummy\", null);\n                dummy.addChild(aspect);\n                Aspect aspectinstance = RegistryConfigurationProcessor.updateAspects(dummy);\n                Iterator aspectElement = dummy.getChildrenWithName(new QName(\"aspect\"));\n                String name = \"\";\n                if (aspectElement != null) {\n                    OMElement aspectelement = (OMElement) aspectElement.next();\n                    name = aspectelement.getAttributeValue(new QName(\"name\"));\n                }\n                registry.addAspect(name,aspectinstance);\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\npublic static boolean isLifecycleNameInUse(String name, Registry registry, Registry rootRegistry)\n        throws RegistryException, XMLStreamException {\n    if (name.contains(\"<aspect\")) {\n        OMElement element = AXIOMUtil.stringToOM(name);\n        if (element != null) {\n            name = element.getAttributeValue(new QName(\"name\"));\n\n            boolean aspectFound = false;\n            String[] aspects = registry.getAvailableAspects();\n            if(aspects != null){\n                for (String aspect: aspects) {\n                    if (name.equals(aspect)) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        }\n        else\n            throw new RegistryException(\"Lifecycle Configuration does not contain the name attribute\");\n    }\n\n    // Execute a search query to find out whether there is any usage in lifecycle.\n    Map<String, String> parameters = new HashMap<>();\n    parameters.put(\"propertyName\", \"registry.Aspects\");\n    parameters.put(\"rightPropertyValue\", name);\n    parameters.put(\"rightOp\", \"eq\");\n    AttributeSearchService searchService = LifeCycleServiceHolder.getInstance().getAttributeSearchService();\n    if (searchService != null) {\n        ResourceData[] resourceData = searchService.search(parameters);\n        return resourceData.length != 0;\n    }\n    return false;\n}\n",
    "after_functions": "public static OMElement buildOMElement(String payload) throws RegistryException {\n\n    OMElement element = getOMElementFromString(payload);\n    element.build();\n    return element;\n}\n\npublic static boolean generateAspect(String resourceFullPath, Registry registry) throws RegistryException {\n    RegistryContext registryContext = registry.getRegistryContext();\n    if (registryContext == null) {\n        return false;\n    }\n    Resource resource = registry.get(resourceFullPath);\n    if (resource != null) {\n        String content = null;\n        if (resource.getContent() != null) {\n            content = RegistryUtils.decodeBytes((byte[]) resource.getContent());\n        }\n        if (content != null) {\n            OMElement aspect = getOMElementFromString(content);\n            if (aspect != null) {\n                OMElement dummy = OMAbstractFactory.getOMFactory().createOMElement(\"dummy\", null);\n                dummy.addChild(aspect);\n                Aspect aspectinstance = RegistryConfigurationProcessor.updateAspects(dummy);\n                Iterator aspectElement = dummy.getChildrenWithName(new QName(\"aspect\"));\n                String name = \"\";\n                if (aspectElement != null) {\n                    OMElement aspectelement = (OMElement) aspectElement.next();\n                    name = aspectelement.getAttributeValue(new QName(\"name\"));\n                }\n                registry.addAspect(name, aspectinstance);\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\npublic static boolean isLifecycleNameInUse(String name, Registry registry, Registry rootRegistry)\n        throws RegistryException {\n\n    if (name.contains(\"<aspect\")) {\n        OMElement element = getOMElementFromString(name);\n        if (element != null) {\n            name = element.getAttributeValue(new QName(\"name\"));\n\n            boolean aspectFound = false;\n            String[] aspects = registry.getAvailableAspects();\n            if(aspects != null){\n                for (String aspect: aspects) {\n                    if (name.equals(aspect)) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        }\n        else\n            throw new RegistryException(\"Lifecycle Configuration does not contain the name attribute\");\n    }\n\n    // Execute a search query to find out whether there is any usage in lifecycle.\n    Map<String, String> parameters = new HashMap<>();\n    parameters.put(\"propertyName\", \"registry.Aspects\");\n    parameters.put(\"rightPropertyValue\", name);\n    parameters.put(\"rightOp\", \"eq\");\n    AttributeSearchService searchService = LifeCycleServiceHolder.getInstance().getAttributeSearchService();\n    if (searchService != null) {\n        ResourceData[] resourceData = searchService.search(parameters);\n        return resourceData.length != 0;\n    }\n    return false;\n}\n\npublic static OMElement getOMElementFromString(String payload) throws RegistryException {\n\n    try {\n        DocumentBuilderFactory dbf = getSecuredDocumentBuilder();\n        DocumentBuilder builder = dbf.newDocumentBuilder();\n        Document document = builder.parse(new InputSource(new StringReader(payload)));\n        return XMLUtils.toOM((document).getDocumentElement());\n    } catch (Exception e) {\n        String message = \"Unable to parse the XML configuration. Please validate the XML configuration\";\n        log.error(message, e);\n        throw new RegistryException(message, e);\n    }\n}\n\npublic static DocumentBuilderFactory getSecuredDocumentBuilder() {\n\n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n    dbf.setNamespaceAware(true);\n    dbf.setXIncludeAware(false);\n    dbf.setExpandEntityReferences(false);\n    try {\n        dbf.setFeature(Constants.SAX_FEATURE_PREFIX + Constants.EXTERNAL_GENERAL_ENTITIES_FEATURE, false);\n        dbf.setFeature(Constants.SAX_FEATURE_PREFIX + Constants.EXTERNAL_PARAMETER_ENTITIES_FEATURE, false);\n        dbf.setFeature(Constants.XERCES_FEATURE_PREFIX + Constants.LOAD_EXTERNAL_DTD_FEATURE, false);\n    } catch (ParserConfigurationException e) {\n        log.error(\n                \"Failed to load XML Processor Feature \" + Constants.EXTERNAL_GENERAL_ENTITIES_FEATURE + \" or \"\n                        + Constants.EXTERNAL_PARAMETER_ENTITIES_FEATURE + \" or \"\n                        + Constants.LOAD_EXTERNAL_DTD_FEATURE);\n    }\n\n    SecurityManager securityManager = new SecurityManager();\n    securityManager.setEntityExpansionLimit(ENTITY_EXPANSION_LIMIT);\n    dbf.setAttribute(Constants.XERCES_PROPERTY_PREFIX + Constants.SECURITY_MANAGER_PROPERTY, securityManager);\n    return dbf;\n}\n"
}