{
    "before_functions": "@Override\npublic DocumentBuilder createDocumentBuilder() {\n    try {\n        DocumentBuilder documentBuilder = createDocumentBuilderFactory().newDocumentBuilder();\n        return documentBuilder;\n    } catch (ParserConfigurationException e) {\n        throw new RuntimeException(e);\n    }\n}\n\n@Override\npublic DocumentBuilderFactory createDocumentBuilderFactory() {\n    DocumentBuilderFactory instance = DocumentBuilderFactory.newInstance();\n    instance.setExpandEntityReferences(false);\n    if (!NamespacePhilosophy.AGNOSTIC.equals(namespacePhilosophy)) {\n        instance.setNamespaceAware(NamespacePhilosophy.HEDONISTIC.equals(namespacePhilosophy));\n    }\n    return instance;\n}\n\n@Override\npublic Transformer createTransformer(final Document... document) {\n    try {\n        Transformer transformer = createTransformerFactory().newTransformer();\n        if (isPrettyPrinting()) {\n\n            // Enable some pretty printing of the resulting xml.\n            transformer.setOutputProperty(\"{http://xml.apache.org/xslt}indent-amount\", \"2\");\n            transformer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n        }\n        if (isOmitXMLDeclaration()) {\n            transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, \"yes\");\n        }\n        return transformer;\n    } catch (TransformerConfigurationException e) {\n        throw new RuntimeException(e);\n    }\n}\n",
    "after_functions": "@Override\npublic DocumentBuilder createDocumentBuilder() {\n    try {\n        DocumentBuilder documentBuilder = createDocumentBuilderFactory().newDocumentBuilder();\n        return documentBuilder;\n    } catch (ParserConfigurationException e) {\n        throw new XBException(\"Error on creating document builder\",e);\n    }\n}\n\n@Override\npublic DocumentBuilderFactory createDocumentBuilderFactory() {\n    DocumentBuilderFactory instance = DocumentBuilderFactory.newInstance();\n    instance.setXIncludeAware(false);\n    instance.setExpandEntityReferences(false);\n    for (String featureDefault : FEATURE_DEFAULTS) {\n        String[] featureValue = featureDefault.split(\"#\");\n        try {\n            instance.setFeature(featureValue[0], Boolean.valueOf(featureValue[1]));\n        } catch (ParserConfigurationException e) {\n            // No worries if one feature is not supported.\n        }\n    }\n    if (!NamespacePhilosophy.AGNOSTIC.equals(namespacePhilosophy)) {\n        instance.setNamespaceAware(NamespacePhilosophy.HEDONISTIC.equals(namespacePhilosophy));\n    }\n    return instance;\n}\n\n@Override\npublic Transformer createTransformer(final Document... document) {\n    try {\n        Transformer transformer = createTransformerFactory().newTransformer();\n        if (isPrettyPrinting()) {\n\n            // Enable some pretty printing of the resulting xml.\n            transformer.setOutputProperty(\"{http://xml.apache.org/xslt}indent-amount\", \"2\");\n            transformer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n        }\n        if (isOmitXMLDeclaration()) {\n            transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, \"yes\");\n        }\n        return transformer;\n    } catch (TransformerConfigurationException e) {\n        throw new XBException(\"Error on creating transformer\",e);\n    }\n}\n"
}