{
    "before_functions": "private function _verify($public_key_or_secret, $expected_alg = null) {\n    $segments = explode('.', $this->raw);\n    $signature_base_string = implode('.', array($segments[0], $segments[1]));\n    if (!$expected_alg) {\n        # NOTE: might better to warn here\n        $expected_alg = $this->header['alg'];\n    }\n    switch ($expected_alg) {\n        case 'HS256':\n        case 'HS384':\n        case 'HS512':\n            return $this->signature === hash_hmac($this->digest(), $signature_base_string, $public_key_or_secret, true);\n        case 'RS256':\n        case 'RS384':\n        case 'RS512':\n            return $this->rsa($public_key_or_secret, RSA::SIGNATURE_PKCS1)->verify($signature_base_string, $this->signature);\n        case 'ES256':\n        case 'ES384':\n        case 'ES512':\n            throw new JOSE_Exception_UnexpectedAlgorithm('Algorithm not supported');\n        case 'PS256':\n        case 'PS384':\n        case 'PS512':\n            return $this->rsa($public_key_or_secret, RSA::SIGNATURE_PSS)->verify($signature_base_string, $this->signature);\n        default:\n            throw new JOSE_Exception_UnexpectedAlgorithm('Unknown algorithm');\n    }\n}\n",
    "after_functions": "private function _verify($public_key_or_secret, $expected_alg = null) {\n    $segments = explode('.', $this->raw);\n    $signature_base_string = implode('.', array($segments[0], $segments[1]));\n    if (!$expected_alg) {\n        $expected_alg = $this->header['alg'];\n        $using_autodetected_alg = true;\n    }\n    switch ($expected_alg) {\n        case 'HS256':\n        case 'HS384':\n        case 'HS512':\n            if ($using_autodetected_alg) {\n                throw new JOSE_Exception_UnexpectedAlgorithm(\n                    'HMAC algs MUST be explicitly specified as $expected_alg'\n                );\n            }\n            $hmac_hash = hash_hmac($this->digest(), $signature_base_string, $public_key_or_secret, true);\n            return hash_equals($this->signature, $hmac_hash);\n        case 'RS256':\n        case 'RS384':\n        case 'RS512':\n            return $this->rsa($public_key_or_secret, RSA::SIGNATURE_PKCS1)->verify($signature_base_string, $this->signature);\n        case 'ES256':\n        case 'ES384':\n        case 'ES512':\n            throw new JOSE_Exception_UnexpectedAlgorithm('Algorithm not supported');\n        case 'PS256':\n        case 'PS384':\n        case 'PS512':\n            return $this->rsa($public_key_or_secret, RSA::SIGNATURE_PSS)->verify($signature_base_string, $this->signature);\n        default:\n            throw new JOSE_Exception_UnexpectedAlgorithm('Unknown algorithm');\n    }\n}\n"
}