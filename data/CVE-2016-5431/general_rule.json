{
    "general_rule": "Rule: Enhance Security Through Explicit Algorithm Specification\n\n1. Type of Improvement:\n   Requiring explicit specification of cryptographic algorithms instead of relying on auto-detection or default values.\n\n2. Benefits:\n   - Increases security by preventing potential vulnerabilities from algorithm confusion or downgrade attacks.\n   - Improves code clarity and maintainability by making security-critical choices explicit.\n   - Reduces the risk of unintended behavior due to implicit assumptions about algorithm selection.\n\n3. Identifying Similar Opportunities:\n   - Look for cryptographic operations where the algorithm is determined automatically or uses a default value.\n   - Search for code that handles multiple cryptographic algorithms without explicit type checking or validation.\n   - Review security-sensitive functions that accept algorithm parameters as optional arguments.\n   - Examine error handling in cryptographic operations for generic or catch-all exceptions.\n\n4. General Application:\n   - Modify functions to require explicit algorithm specification as a mandatory parameter.\n   - Implement strict type checking and validation for cryptographic algorithm inputs.\n   - Replace auto-detection logic with explicit conditional statements based on specified algorithms.\n   - Add clear error messages or exceptions for unsupported or incorrectly specified algorithms.\n   - Update documentation and method signatures to reflect the requirement for explicit algorithm specification.\n   - Consider using enums or constants to represent valid algorithm choices, improving type safety and code readability."
}