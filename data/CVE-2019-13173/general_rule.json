{
    "general_rule": "Rule: Simplify Conditional Logic\n\n1. Type of improvement:\n   Reducing complexity in conditional statements and control flow.\n\n2. Benefits:\n   - Improved readability and maintainability\n   - Potentially faster execution by reducing unnecessary checks\n   - Easier to test and debug\n   - Reduced cognitive load for developers\n\n3. How to identify opportunities:\n   - Look for nested if-else statements or switch cases\n   - Identify repeated conditions or redundant checks\n   - Examine complex boolean expressions\n   - Search for multiple return statements within a single function\n   - Review error handling and edge case management\n\n4. General application:\n   - Use early returns to handle edge cases\n   - Combine related conditions using logical operators\n   - Extract complex conditions into separate functions\n   - Utilize polymorphism or strategy pattern instead of type-checking\n   - Implement lookup tables or maps for multiple condition scenarios\n   - Consider using guard clauses to reduce nesting\n   - Leverage language-specific features for concise conditionals\n\nBy simplifying conditional logic, code becomes more straightforward, \neasier to understand, and less prone to errors. This principle can be \napplied across various programming languages and project types to \nimprove overall code quality and performance."
}