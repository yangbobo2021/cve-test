{
    "general_rule": "Rule: Use Secure Random Number Generation for Cryptographic Operations\n\n1. Type of Improvement:\n   Replace standard random number generators with cryptographically secure alternatives for security-sensitive operations.\n\n2. Benefits:\n   - Enhances security by using unpredictable, high-entropy random numbers\n   - Reduces vulnerability to attacks that exploit predictable random number sequences\n   - Improves overall system integrity and resistance to cryptographic attacks\n\n3. Identifying Similar Opportunities:\n   - Look for usage of standard random number generators in security-related contexts\n   - Review code responsible for generating tokens, keys, or other sensitive values\n   - Examine cryptographic operations, authentication mechanisms, and session management code\n   - Consider any part of the application that relies on randomness for security purposes\n\n4. General Application:\n   - This principle applies to various programming languages and frameworks\n   - It's particularly important in web applications, cryptographic libraries, and security-focused modules\n   - The specific implementation may vary, but the concept of using secure random number generation remains consistent across different technologies"
}