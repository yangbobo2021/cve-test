{
    "general_rule": "Rule: Input Validation and Sanitization\n\n1. Type of Improvement:\n   Add validation and sanitization for user inputs or external data before processing or storing them.\n\n2. Benefits:\n   - Enhances security by preventing malformed or malicious data from entering the system\n   - Improves data integrity and consistency\n   - Reduces the risk of errors or unexpected behavior in downstream processes\n   - Helps maintain a robust and reliable application\n\n3. Identifying Opportunities:\n   - Look for functions or methods that accept user inputs or external data\n   - Check for places where data is being stored or used without prior validation\n   - Review areas where data is being passed between different parts of the application\n   - Examine code that interacts with external systems or APIs\n\n4. General Application:\n   - Implement appropriate validation checks based on the expected data type and format\n   - Use built-in language functions or libraries for common validations (e.g., email, URL, date)\n   - Sanitize inputs by removing or escaping potentially harmful characters\n   - Consider using regular expressions for complex pattern matching\n   - Implement type checking and casting where necessary\n   - Validate data at multiple levels: client-side, server-side, and database level\n   - Use centralized validation functions or classes to ensure consistency across the application\n   - Log validation failures and handle errors gracefully\n   - Regularly review and update validation rules as requirements change"
}