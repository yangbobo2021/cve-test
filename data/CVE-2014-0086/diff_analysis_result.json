{
    "before_functions": "public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException,\n        ServletException {\n    if (request instanceof HttpServletRequest && response instanceof HttpServletResponse) {\n        HttpServletRequest httpReq = (HttpServletRequest) request;\n        HttpServletResponse httpResp = (HttpServletResponse) response;\n\n        if (\"GET\".equals(httpReq.getMethod())) {\n            Meteor meteor = Meteor.build(httpReq, SCOPE.REQUEST, Collections.<BroadcastFilter>emptyList(), null);\n\n            String pushSessionId = httpReq.getParameter(PUSH_SESSION_ID_PARAM);\n\n            Session session = null;\n\n            if (pushSessionId != null) {\n                ensureServletContextAvailable(request);\n                PushContext pushContext = (PushContext) servletContext.getAttribute(PushContext.INSTANCE_KEY_NAME);\n                session = pushContext.getSessionManager().getPushSession(pushSessionId);\n            }\n\n            if (session == null) {\n                if (LOGGER.isDebugEnabled()) {\n                    LOGGER.debug(MessageFormat.format(\"Session {0} was not found\", pushSessionId));\n                }\n                httpResp.sendError(HttpServletResponse.SC_BAD_REQUEST);\n                return;\n            }\n\n            httpResp.setContentType(\"text/plain\");\n\n            try {\n                Request pushRequest = new RequestImpl(meteor, session);\n\n                httpReq.setAttribute(SESSION_ATTRIBUTE_NAME, session);\n                httpReq.setAttribute(REQUEST_ATTRIBUTE_NAME, pushRequest);\n\n                pushRequest.suspend();\n            } catch (Exception e) {\n                LOGGER.error(e.getMessage(), e);\n            }\n\n            return;\n        }\n    }\n}\n",
    "after_functions": "public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException,\n        ServletException {\n    if (request instanceof HttpServletRequest && response instanceof HttpServletResponse) {\n        HttpServletRequest httpReq = (HttpServletRequest) request;\n        HttpServletResponse httpResp = (HttpServletResponse) response;\n\n        if (\"GET\".equals(httpReq.getMethod())) {\n            String pushSessionId = httpReq.getParameter(PUSH_SESSION_ID_PARAM);\n\n            Session session = null;\n\n            if (pushSessionId != null) {\n                ensureServletContextAvailable(request);\n                PushContext pushContext = (PushContext) servletContext.getAttribute(PushContext.INSTANCE_KEY_NAME);\n                session = pushContext.getSessionManager().getPushSession(pushSessionId);\n            }\n\n            if (session == null) {\n                if (LOGGER.isDebugEnabled()) {\n                    LOGGER.debug(MessageFormat.format(\"Session {0} was not found\", pushSessionId));\n                }\n                httpResp.sendError(HttpServletResponse.SC_BAD_REQUEST);\n                return;\n            }\n\n            httpResp.setContentType(\"text/plain\");\n\n            Meteor meteor = Meteor.build(httpReq, SCOPE.REQUEST, Collections.<BroadcastFilter>emptyList(), null);\n\n            try {\n                Request pushRequest = new RequestImpl(meteor, session);\n\n                httpReq.setAttribute(SESSION_ATTRIBUTE_NAME, session);\n                httpReq.setAttribute(REQUEST_ATTRIBUTE_NAME, pushRequest);\n\n                pushRequest.suspend();\n            } catch (Exception e) {\n                LOGGER.error(e.getMessage(), e);\n            }\n\n            return;\n        }\n    }\n}\n"
}