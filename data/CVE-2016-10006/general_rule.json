{
    "general_rule": "Rule: Simplify Conditional Logic and Reduce Nesting\n\n1. Type of improvement:\n   Reorganizing and simplifying complex conditional structures to reduce nesting levels and improve code readability.\n\n2. Benefits:\n   - Improved code readability and maintainability\n   - Reduced cognitive load for developers\n   - Potentially improved performance by reducing the number of condition checks\n   - Easier to test and debug due to clearer logic flow\n\n3. How to identify similar opportunities:\n   - Look for deeply nested if-else statements or switch cases\n   - Identify repeated condition checks or redundant logic\n   - Search for methods or functions with high cyclomatic complexity\n   - Review code sections with multiple levels of indentation\n\n4. General application:\n   - Use early returns or guard clauses to handle special cases first\n   - Combine related conditions using logical operators\n   - Extract complex condition checks into separate methods with descriptive names\n   - Consider using polymorphism or the strategy pattern to replace complex conditional logic\n   - Utilize switch expressions or pattern matching where available in the language\n   - Refactor large methods into smaller, more focused functions\n   - Use enumeration types to represent a fixed set of constants and their associated behavior"
}