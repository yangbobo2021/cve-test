{
    "general_rule": "Rule: Implement Input Sanitization for User-Supplied Data\n\n1. Type of Improvement:\n   This change focuses on enhancing security by sanitizing user-supplied input before using it in the application.\n\n2. Benefits:\n   - Prevents potential security vulnerabilities such as cross-site scripting (XSS) attacks\n   - Improves the overall robustness and reliability of the application\n   - Reduces the risk of malicious data manipulation or injection\n\n3. Identifying Similar Opportunities:\n   - Look for areas in the codebase where external input is directly used without validation or sanitization\n   - Focus on variables that store user-supplied data, especially those used in output rendering or database queries\n   - Pay attention to parameters in constructors, setters, or public methods that accept string inputs\n\n4. General Application:\n   - Implement appropriate sanitization techniques for different types of input (e.g., HTML escaping, JavaScript escaping)\n   - Use existing libraries or functions designed for input sanitization when available\n   - Apply sanitization as close to the input source as possible\n   - Consider creating utility methods for commonly used sanitization operations\n   - Ensure that sanitization is applied consistently across the entire application\n\nNote: While input sanitization is crucial for security, it should be used in conjunction with other security measures such as input validation, output encoding, and following the principle of least privilege."
}