{
    "before_functions": "// serveTCP starts a TCP listener for the server.\n// Each request is handled in a separate goroutine.\nfunc (srv *Server) serveTCP(l net.Listener) error {\n\tdefer l.Close()\n\n\tif srv.NotifyStartedFunc != nil {\n\t\tsrv.NotifyStartedFunc()\n\t}\n\n\treader := Reader(&defaultReader{srv})\n\tif srv.DecorateReader != nil {\n\t\treader = srv.DecorateReader(reader)\n\t}\n\n\thandler := srv.Handler\n\tif handler == nil {\n\t\thandler = DefaultServeMux\n\t}\n\trtimeout := srv.getReadTimeout()\n\t// deadline is not used here\n\tfor {\n\t\trw, err := l.Accept()\n\t\tsrv.lock.RLock()\n\t\tif !srv.started {\n\t\t\tsrv.lock.RUnlock()\n\t\t\treturn nil\n\t\t}\n\t\tsrv.lock.RUnlock()\n\t\tif err != nil {\n\t\t\tif neterr, ok := err.(net.Error); ok && neterr.Temporary() {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\treturn err\n\t\t}\n\t\tm, err := reader.ReadTCP(rw, rtimeout)\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\t\tgo srv.serve(rw.RemoteAddr(), handler, m, nil, nil, rw)\n\t}\n}\n",
    "after_functions": "// serveTCP starts a TCP listener for the server.\n// Each request is handled in a separate goroutine.\nfunc (srv *Server) serveTCP(l net.Listener) error {\n\tdefer l.Close()\n\n\tif srv.NotifyStartedFunc != nil {\n\t\tsrv.NotifyStartedFunc()\n\t}\n\n\treader := Reader(&defaultReader{srv})\n\tif srv.DecorateReader != nil {\n\t\treader = srv.DecorateReader(reader)\n\t}\n\n\thandler := srv.Handler\n\tif handler == nil {\n\t\thandler = DefaultServeMux\n\t}\n\trtimeout := srv.getReadTimeout()\n\t// deadline is not used here\n\tfor {\n\t\trw, err := l.Accept()\n\t\tsrv.lock.RLock()\n\t\tif !srv.started {\n\t\t\tsrv.lock.RUnlock()\n\t\t\treturn nil\n\t\t}\n\t\tsrv.lock.RUnlock()\n\t\tif err != nil {\n\t\t\tif neterr, ok := err.(net.Error); ok && neterr.Temporary() {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\treturn err\n\t\t}\n\t\tgo func() {\n\t\t\tm, err := reader.ReadTCP(rw, rtimeout)\n\t\t\tif err != nil {\n\t\t\t\trw.Close()\n\t\t\t\treturn\n\t\t\t}\n\t\t\tsrv.serve(rw.RemoteAddr(), handler, m, nil, nil, rw)\n\t\t}()\n\t}\n}\n"
}