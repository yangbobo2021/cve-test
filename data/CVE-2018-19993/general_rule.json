{
    "general_rule": "Rule: Implement Input Validation and Sanitization\n\n1. Type of improvement:\n   Add input validation and sanitization for user-supplied data, especially\n   when used in output or database operations.\n\n2. Benefits:\n   - Enhances security by preventing potential injection attacks\n   - Reduces the risk of unexpected behavior due to malformed input\n   - Improves overall code robustness and reliability\n\n3. How to identify similar opportunities:\n   - Look for instances where user input is directly used without validation\n   - Check for functions that interact with databases, file systems, or generate output\n   - Review areas where external data is processed or displayed\n   - Examine error-prone sections of code that may benefit from stricter input handling\n\n4. General application:\n   - Use appropriate validation functions for different data types (e.g., numeric, alphanumeric, email)\n   - Apply sanitization techniques to remove or escape potentially harmful characters\n   - Implement whitelisting for known-good input when possible\n   - Consider using type hinting or strict type checking in languages that support it\n   - Utilize built-in language or framework features for input validation when available\n   - Document the expected input format and implement checks to ensure compliance"
}