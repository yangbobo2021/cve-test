{
    "before_functions": "public class OHttpSessionManager extends OSharedResourceAbstract {\n  private static final OHttpSessionManager instance = new OHttpSessionManager();\n  private Map<String, OHttpSession>        sessions = new HashMap<String, OHttpSession>();\n  private int                              expirationTime;\n  private Random                           random   = new Random();\n\n  protected OHttpSessionManager() {\n    expirationTime = OGlobalConfiguration.NETWORK_HTTP_SESSION_EXPIRE_TIMEOUT.getValueAsInteger() * 1000;\n\n    Orient.instance().scheduleTask(new TimerTask() {\n      @Override\n      public void run() {\n        final int expired = checkSessionsValidity();\n        if (expired > 0)\n          OLogManager.instance().debug(this, \"Removed %d session because expired\", expired);\n      }\n    }, expirationTime, expirationTime);\n  }\n}\n",
    "after_functions": "public class OHttpSessionManager extends OSharedResourceAbstract {\n  private static final OHttpSessionManager instance = new OHttpSessionManager();\n  private Map<String, OHttpSession>        sessions = new HashMap<String, OHttpSession>();\n  private int                              expirationTime;\n  private Random                           random   = new SecureRandom();\n\n  protected OHttpSessionManager() {\n    expirationTime = OGlobalConfiguration.NETWORK_HTTP_SESSION_EXPIRE_TIMEOUT.getValueAsInteger() * 1000;\n\n    Orient.instance().scheduleTask(new TimerTask() {\n      @Override\n      public void run() {\n        final int expired = checkSessionsValidity();\n        if (expired > 0)\n          OLogManager.instance().debug(this, \"Removed %d session because expired\", expired);\n      }\n    }, expirationTime, expirationTime);\n  }\n}\n"
}