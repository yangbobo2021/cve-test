{
    "general_rule": "Rule: Parameterize SQL Queries\n\n1. Type of improvement:\n   Replace string concatenation for building SQL queries with parameterized queries.\n\n2. Benefits:\n   - Improved security: Helps prevent SQL injection attacks\n   - Better performance: Allows database to cache and reuse query execution plans\n   - Increased readability: Separates SQL logic from parameter values\n   - Easier maintenance: Reduces the risk of syntax errors when modifying queries\n\n3. How to identify similar opportunities:\n   - Look for SQL query strings that include concatenated values\n   - Search for methods that build SQL queries using string concatenation\n   - Identify areas where user input or variable data is directly inserted into SQL strings\n\n4. General application:\n   - Use prepared statements or parameterized queries provided by your database library\n   - Replace string concatenation with placeholder symbols (e.g., '?', ':param') in the SQL string\n   - Provide parameter values separately from the SQL string\n   - Ensure that all dynamic values in queries are parameterized, not just some\n   - Apply this principle to all database operations, including SELECT, INSERT, UPDATE, and DELETE statements\n\nThis rule can be applied across various programming languages and database systems to improve code quality and security."
}