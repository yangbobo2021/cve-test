{
    "before_functions": "void CrossSite::MarshalPrototypeChain(ScriptContext* scriptContext, DynamicObject * object)\n{\n    RecyclableObject * prototype = object->GetPrototype();\n    while (prototype->GetTypeId() != TypeIds_Null && prototype->GetTypeId() != TypeIds_HostDispatch)\n    {\n        // We should not see any static type or host dispatch here\n        DynamicObject * prototypeObject = DynamicObject::FromVar(prototype);\n        if (prototypeObject->IsCrossSiteObject())\n        {\n            break;\n        }\n        if (scriptContext != prototypeObject->GetScriptContext() && !prototypeObject->IsExternal())\n        {\n            MarshalDynamicObject(scriptContext, prototypeObject);\n        }\n        prototype = prototypeObject->GetPrototype();\n    }\n}\n",
    "after_functions": "void CrossSite::MarshalPrototypeChain(ScriptContext* scriptContext, DynamicObject * object)\n{\n    RecyclableObject * prototype = object->GetPrototype();\n    while (prototype->GetTypeId() != TypeIds_Null && prototype->GetTypeId() != TypeIds_HostDispatch)\n    {\n        // We should not see any static type or host dispatch here\n        DynamicObject * prototypeObject = DynamicObject::FromVar(prototype);\n        if (prototypeObject->IsCrossSiteObject())\n        {\n            break;\n        }\n        if (scriptContext != prototypeObject->GetScriptContext() && !prototypeObject->IsExternal())\n        {\n            MarshalDynamicObject(scriptContext, prototypeObject);\n        }\n        if (JavascriptProxy::Is(prototypeObject))\n        {\n            // Fetching prototype of proxy can invoke trap - which we don't want during the marshalling time.\n            break;\n        }\n        prototype = prototypeObject->GetPrototype();\n    }\n}\n"
}