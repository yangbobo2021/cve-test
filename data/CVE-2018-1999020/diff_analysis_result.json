{
    "before_functions": "private String substring(byte[] bytes, int length) {\n    return new String(bytes, 0, Math.min(bytes.length, length), StandardCharsets.UTF_8);\n}\n\n/**\n * Purges the application archive directory.\n *\n * @param appName application name\n */\npublic synchronized void purgeApplication(String appName) {\n    File appDir = new File(appsDir, appName);\n    try {\n        Tools.removeDirectory(appDir);\n    } catch (IOException e) {\n        throw new ApplicationException(\"Unable to purge application \" + appName, e);\n    }\n    if (appDir.exists()) {\n        throw new ApplicationException(\"Unable to purge application \" + appName);\n    }\n}\n\n// Saves the specified ZIP stream into a file under app-specific directory.\nprivate void saveApplication(InputStream stream, ApplicationDescription desc,\n                             boolean isSelfContainedJar)\n        throws IOException {\n    String name = desc.name() + (isSelfContainedJar ? JAR : OAR);\n    Files.write(toByteArray(stream), appFile(desc.name(), name));\n}\n\n// Returns the name of the file located under the specified app directory.\nprivate File appFile(String appName, String fileName) {\n    return new File(new File(appsDir, appName), fileName);\n}\n",
    "after_functions": "private String substring(byte[] bytes, int length) {\n    return new String(bytes, 0, Math.min(bytes.length, length), StandardCharsets.UTF_8);\n}\n\nprivate String filterAppNameForFilesystem(String name) {\n    return name.replace(\"/\", \"^\");\n}\n\n/**\n * Purges the application archive directory.\n *\n * @param appName application name\n */\npublic synchronized void purgeApplication(String appName) {\n    File appDir = new File(appsDir, filterAppNameForFilesystem(appName));\n    try {\n        Tools.removeDirectory(appDir);\n    } catch (IOException e) {\n        throw new ApplicationException(\"Unable to purge application \" + appName, e);\n    }\n    if (appDir.exists()) {\n        throw new ApplicationException(\"Unable to purge application \" + appName);\n    }\n}\n\n// Saves the specified ZIP stream into a file under app-specific directory.\nprivate void saveApplication(InputStream stream, ApplicationDescription desc,\n                             boolean isSelfContainedJar)\n        throws IOException {\n    String name = filterAppNameForFilesystem(desc.name()) + (isSelfContainedJar ? JAR : OAR);\n    Files.write(toByteArray(stream), appFile(desc.name(), name));\n}\n\n// Returns the name of the file located under the specified app directory.\nprivate File appFile(String appName, String fileName) {\n    return new File(new File(appsDir, filterAppNameForFilesystem(appName)), fileName);\n}\n"
}