{
    "before_functions": "@Override\npublic final Resource forFile(String relativePath)\n{\n    assert relativePath != null;\n\n    List<String> terms = CollectionFactory.newList();\n\n    for (String term : getFolder().split(\"/\"))\n    {\n        terms.add(term);\n    }\n\n    for (String term : relativePath.split(\"/\"))\n    {\n        // This will occur if the relative path contains sequential slashes\n\n        if (term.equals(\"\") || term.equals(\".\"))\n        {\n            continue;\n        }\n\n        if (term.equals(\"..\"))\n        {\n            if (terms.isEmpty())\n            {\n                throw new IllegalStateException(String.format(\"Relative path '%s' for %s would go above root.\", relativePath, this));\n            }\n\n            terms.remove(terms.size() - 1);\n\n            continue;\n        }\n\n        // TODO: term blank or otherwise invalid?\n        // TODO: final term should not be \".\" or \"..\", or for that matter, the\n        // name of a folder, since a Resource should be a file within\n        // a folder.\n\n        terms.add(term);\n    }\n\n    StringBuilder path = new StringBuilder(100);\n    String sep = \"\";\n\n    for (String term : terms)\n    {\n        path.append(sep).append(term);\n        sep = \"/\";\n    }\n\n    return createResource(path.toString());\n}\n",
    "after_functions": "@Override\npublic final Resource forFile(String relativePath)\n{\n    assert relativePath != null;\n\n    List<String> terms = CollectionFactory.newList();\n\n    for (String term : getFolder().split(\"/\"))\n    {\n        terms.add(term);\n    }\n\n    // Handling systems using backslash as the path separator, such as Windows\n    relativePath = relativePath.replace('\\\\', '/');\n    \n    for (String term : relativePath.split(\"/\"))\n    {\n        // This will occur if the relative path contains sequential slashes\n\n        if (term.equals(\"\") || term.equals(\".\"))\n        {\n            continue;\n        }\n\n        if (term.equals(\"..\"))\n        {\n            if (terms.isEmpty())\n            {\n                throw new IllegalStateException(String.format(\"Relative path '%s' for %s would go above root.\", relativePath, this));\n            }\n\n            terms.remove(terms.size() - 1);\n\n            continue;\n        }\n\n        // TODO: term blank or otherwise invalid?\n        // TODO: final term should not be \".\" or \"..\", or for that matter, the\n        // name of a folder, since a Resource should be a file within\n        // a folder.\n\n        terms.add(term);\n    }\n\n    StringBuilder path = new StringBuilder(100);\n    String sep = \"\";\n\n    for (String term : terms)\n    {\n        path.append(sep).append(term);\n        sep = \"/\";\n    }\n\n    return createResource(path.toString());\n}\n"
}