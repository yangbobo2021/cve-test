{
    "before_functions": "public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\n    HttpServletRequest req = (HttpServletRequest) request;\n    HttpServletResponse rsp = (HttpServletResponse) response;\n    String authorization = req.getHeader(\"Authorization\");\n\n    if (authorization!=null) {\n        // authenticate the user\n        String uidpassword = Scrambler.descramble(authorization.substring(6));\n        int idx = uidpassword.indexOf(':');\n        if (idx >= 0) {\n            String username = uidpassword.substring(0, idx);\n            String password = uidpassword.substring(idx+1);\n\n            // attempt to authenticate as API token\n            User u = User.get(username);\n            ApiTokenProperty t = u.getProperty(ApiTokenProperty.class);\n            if (t!=null && t.matchesPassword(password)) {\n                // even if we fail to match the password, we aren't rejecting it.\n                // as the user might be passing in a real password.\n                SecurityContext oldContext = ACL.impersonate(u.impersonate());\n                try {\n                    request.setAttribute(ApiTokenProperty.class.getName(), u);\n                    chain.doFilter(request,response);\n                    return;\n                } finally {\n                    SecurityContextHolder.setContext(oldContext);\n                }\n            }\n        }\n    }\n\n    chain.doFilter(request,response);\n}\n",
    "after_functions": "public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\n    HttpServletRequest req = (HttpServletRequest) request;\n    HttpServletResponse rsp = (HttpServletResponse) response;\n    String authorization = req.getHeader(\"Authorization\");\n\n    if (authorization!=null) {\n        // authenticate the user\n        String uidpassword = Scrambler.descramble(authorization.substring(6));\n        int idx = uidpassword.indexOf(':');\n        if (idx >= 0) {\n            String username = uidpassword.substring(0, idx);\n            try {\n                Jenkins.getInstance().getSecurityRealm().loadUserByUsername(username);\n            } catch (UserMayOrMayNotExistException x) {\n                // OK, give them the benefit of the doubt.\n            } catch (UsernameNotFoundException x) {\n                // Not/no longer a user; deny the API token. (But do not leak the information that this happened.)\n                chain.doFilter(request, response);\n                return;\n            } catch (DataAccessException x) {\n                throw new ServletException(x);\n            }\n            String password = uidpassword.substring(idx+1);\n\n            // attempt to authenticate as API token\n            User u = User.get(username);\n            ApiTokenProperty t = u.getProperty(ApiTokenProperty.class);\n            if (t!=null && t.matchesPassword(password)) {\n                // even if we fail to match the password, we aren't rejecting it.\n                // as the user might be passing in a real password.\n                SecurityContext oldContext = ACL.impersonate(u.impersonate());\n                try {\n                    request.setAttribute(ApiTokenProperty.class.getName(), u);\n                    chain.doFilter(request,response);\n                    return;\n                } finally {\n                    SecurityContextHolder.setContext(oldContext);\n                }\n            }\n        }\n    }\n\n    chain.doFilter(request,response);\n}\n"
}