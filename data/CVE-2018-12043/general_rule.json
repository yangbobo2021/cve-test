{
    "general_rule": "Rule: Sanitize user input and outputs\n\n1. Description: Sanitize all user-provided input before using it in the application, and sanitize all data before outputting it to prevent XSS and other injection attacks.\n\n2. Benefits:\n- Improves security by preventing malicious input from being executed\n- Reduces vulnerabilities like XSS, SQL injection, etc.\n- Ensures data integrity throughout the application\n\n3. How to identify opportunities:\n- Look for places where user input is accepted (forms, URL parameters, etc.)\n- Check where data is output to the browser or other systems\n- Review database queries and API calls that use external data\n- Examine places where HTML is generated dynamically\n\n4. General implementation:\n- Use language/framework-specific sanitization functions \n- Sanitize on input and escape on output\n- Validate data types and formats\n- Use prepared statements for database queries\n- Implement Content Security Policy headers\n\nThis rule can be applied across different languages and frameworks to improve security and data handling. The specific sanitization techniques may vary, but the core principle remains the same."
}