{
    "general_rule": "Rule: Simplify Exception Handling and Error Messages\n\n1. Type of improvement:\n   Replacing overly broad exception handling with more specific error checks and messages.\n\n2. Benefits:\n   - Improves code readability and maintainability\n   - Provides more accurate and helpful error messages\n   - Reduces the risk of masking unexpected errors\n   - Makes debugging easier by pinpointing the exact cause of failures\n\n3. How to identify similar opportunities:\n   - Look for broad exception clauses (e.g., `except Exception:`)\n   - Search for generic error messages that don't provide specific information\n   - Examine code that uses assertions for error checking\n   - Review error-prone areas of code, such as user input validation or external service interactions\n\n4. General application:\n   - Replace broad exception handling with specific error checks\n   - Use appropriate error types or custom exceptions for different scenarios\n   - Provide clear, informative error messages that explain what went wrong\n   - Consider using early returns or guard clauses to handle error cases\n   - Ensure that error handling doesn't hide important information or unexpected issues\n\nThis rule can be applied across various programming languages and projects to improve error handling, enhance code quality, and make troubleshooting easier for developers and users alike."
}