{
    "general_rule": "Rule: Sanitize and Normalize Input Data\n\n1. Type of improvement:\n   Sanitizing and normalizing input data before processing or storing it.\n\n2. Benefits:\n   - Improves security by preventing potential injection attacks\n   - Ensures consistency in data handling and storage\n   - Reduces errors and unexpected behavior caused by malformed input\n   - Simplifies downstream processing and validation\n\n3. Identifying opportunities:\n   Look for areas in the code where:\n   - User input is directly used without modification\n   - Data is parsed or processed from external sources\n   - Values are used as keys, identifiers, or passed to other systems\n   - String manipulation is performed on raw input\n\n4. General application:\n   - Implement input sanitization functions for common data types\n   - Apply normalization techniques appropriate for the data's context\n   - Create a centralized input processing layer or utility functions\n   - Use existing libraries or frameworks for input sanitization when available\n   - Establish coding standards that require input sanitization\n   - Perform code reviews with a focus on identifying unsanitized input\n\nRemember to balance thoroughness with performance, and consider the specific \nrequirements and constraints of your project when implementing this rule."
}