{
    "before_functions": "class APIHandler(IPythonHandler):\n    \"\"\"Base class for API handlers\"\"\"\n    \n    @property\n    def content_security_policy(self):\n        csp = '; '.join([\n                super(APIHandler, self).content_security_policy,\n                \"default-src 'none'\",\n            ])\n        return csp\n    \n    def finish(self, *args, **kwargs):\n        self.set_header('Content-Type', 'application/json')\n        return super(APIHandler, self).finish(*args, **kwargs)\n",
    "after_functions": "class APIHandler(IPythonHandler):\n    \"\"\"Base class for API handlers\"\"\"\n    \n    def check_origin(self):\n        \"\"\"Check Origin for cross-site API requests.\n        \n        Copied from WebSocket with changes:\n        \n        - allow unspecified host/origin (e.g. scripts)\n        \"\"\"\n        if self.allow_origin == '*':\n            return True\n\n        host = self.request.headers.get(\"Host\")\n        origin = self.request.headers.get(\"Origin\")\n\n        # If no header is provided, assume it comes from a script/curl.\n        # We are only concerned with cross-site browser stuff here.\n        if origin is None or host is None:\n            return True\n        \n        origin = origin.lower()\n        origin_host = urlparse(origin).netloc\n        \n        # OK if origin matches host\n        if origin_host == host:\n            return True\n        \n        # Check CORS headers\n        if self.allow_origin:\n            allow = self.allow_origin == origin\n        elif self.allow_origin_pat:\n            allow = bool(self.allow_origin_pat.match(origin))\n        else:\n            # No CORS headers deny the request\n            allow = False\n        if not allow:\n            self.log.warn(\"Blocking Cross Origin API request.  Origin: %s, Host: %s\",\n                origin, host,\n            )\n        return allow\n\n    def prepare(self):\n        if not self.check_origin():\n            raise web.HTTPError(404)\n        return super(APIHandler, self).prepare()\n\n    @property\n    def content_security_policy(self):\n        csp = '; '.join([\n                super(APIHandler, self).content_security_policy,\n                \"default-src 'none'\",\n            ])\n        return csp\n    \n    def finish(self, *args, **kwargs):\n        self.set_header('Content-Type', 'application/json')\n        return super(APIHandler, self).finish(*args, **kwargs)\n"
}