{
    "general_rule": "Rule: Implement Input Sanitization for User-Controlled Data\n\n1. Type of Improvement:\n   The change involves adding input sanitization to user-controlled or externally provided data before using it in the application.\n\n2. Benefits:\n   - Enhances security by preventing potential injection attacks (e.g., XSS, SQL injection)\n   - Improves data integrity by ensuring that input conforms to expected formats\n   - Reduces the risk of unexpected behavior caused by malformed input\n\n3. Identifying Opportunities:\n   - Look for variables or parameters that accept external input or user-provided data\n   - Pay special attention to data used in HTML output, database queries, or system commands\n   - Review areas where data is passed between different parts of the application or between systems\n\n4. General Application:\n   - Implement appropriate sanitization techniques based on the context of data usage\n   - Use built-in sanitization functions or libraries when available\n   - Apply sanitization as close to the input source as possible\n   - Consider creating centralized sanitization utilities for consistent application across the project\n   - Regularly review and update sanitization methods to address new security concerns\n\nNote: While input sanitization is crucial for security, it should be used in conjunction with other security measures like input validation, output encoding, and parameterized queries for comprehensive protection."
}