{
    "before_functions": "class NbconvertFileHandler(IPythonHandler):\n\n    SUPPORTED_METHODS = ('GET',)\n\n    @web.authenticated\n    def get(self, format, path):\n\n        exporter = get_exporter(format, config=self.config, log=self.log)\n\n        path = path.strip('/')\n        # If the notebook relates to a real file (default contents manager),\n        # give its path to nbconvert.\n        if hasattr(self.contents_manager, '_get_os_path'):\n            os_path = self.contents_manager._get_os_path(path)\n            ext_resources_dir, basename = os.path.split(os_path)\n        else:\n            ext_resources_dir = None\n\n        model = self.contents_manager.get(path=path)\n        name = model['name']\n        if model['type'] != 'notebook':\n            # not a notebook, redirect to files\n            return FilesRedirectHandler.redirect_to_files(self, path)\n\n        nb = model['content']\n\n        self.set_header('Last-Modified', model['last_modified'])\n\n        # create resources dictionary\n        mod_date = model['last_modified'].strftime(text.date_format)\n        nb_title = os.path.splitext(name)[0]\n\n        resource_dict = {\n            \"metadata\": {\n                \"name\": nb_title,\n                \"modified_date\": mod_date\n            },\n            \"config_dir\": self.application.settings['config_dir']\n        }\n\n        if ext_resources_dir:\n            resource_dict['metadata']['path'] = ext_resources_dir\n\n        try:\n            output, resources = exporter.from_notebook_node(\n                nb,\n                resources=resource_dict\n            )\n        except Exception as e:\n            self.log.exception(\"nbconvert failed: %s\", e)\n            raise web.HTTPError(500, \"nbconvert failed: %s\" % e)\n\n        if respond_zip(self, name, output, resources):\n            return\n\n        # Force download if requested\n        if self.get_argument('download', 'false').lower() == 'true':\n            filename = os.path.splitext(name)[0] + resources['output_extension']\n            self.set_attachment_header(filename)\n\n        # MIME type\n        if exporter.output_mimetype:\n            self.set_header('Content-Type',\n                            '%s; charset=utf-8' % exporter.output_mimetype)\n\n        self.set_header('Cache-Control', 'no-store, no-cache, must-revalidate, max-age=0')\n        self.finish(output)\n\nclass NbconvertPostHandler(IPythonHandler):\n    SUPPORTED_METHODS = ('POST',)\n\n    @web.authenticated\n    def post(self, format):\n        exporter = get_exporter(format, config=self.config)\n\n        model = self.get_json_body()\n        name = model.get('name', 'notebook.ipynb')\n        nbnode = from_dict(model['content'])\n\n        try:\n            output, resources = exporter.from_notebook_node(nbnode, resources={\n                \"metadata\": {\"name\": name[:name.rfind('.')],},\n                \"config_dir\": self.application.settings['config_dir'],\n            })\n        except Exception as e:\n            raise web.HTTPError(500, \"nbconvert failed: %s\" % e)\n\n        if respond_zip(self, name, output, resources):\n            return\n\n        # MIME type\n        if exporter.output_mimetype:\n            self.set_header('Content-Type',\n                            '%s; charset=utf-8' % exporter.output_mimetype)\n\n        self.finish(output)\n",
    "after_functions": "class NbconvertFileHandler(IPythonHandler):\n\n    SUPPORTED_METHODS = ('GET',)\n\n    @property\n    def content_security_policy(self):\n        # In case we're serving HTML/SVG, confine any Javascript to a unique\n        # origin so it can't interact with the notebook server.\n        return super(NbconvertFileHandler, self).content_security_policy + \\\n               \"; sandbox allow-scripts\"\n\n    @web.authenticated\n    def get(self, format, path):\n\n        exporter = get_exporter(format, config=self.config, log=self.log)\n\n        path = path.strip('/')\n        # If the notebook relates to a real file (default contents manager),\n        # give its path to nbconvert.\n        if hasattr(self.contents_manager, '_get_os_path'):\n            os_path = self.contents_manager._get_os_path(path)\n            ext_resources_dir, basename = os.path.split(os_path)\n        else:\n            ext_resources_dir = None\n\n        model = self.contents_manager.get(path=path)\n        name = model['name']\n        if model['type'] != 'notebook':\n            # not a notebook, redirect to files\n            return FilesRedirectHandler.redirect_to_files(self, path)\n\n        nb = model['content']\n\n        self.set_header('Last-Modified', model['last_modified'])\n\n        # create resources dictionary\n        mod_date = model['last_modified'].strftime(text.date_format)\n        nb_title = os.path.splitext(name)[0]\n\n        resource_dict = {\n            \"metadata\": {\n                \"name\": nb_title,\n                \"modified_date\": mod_date\n            },\n            \"config_dir\": self.application.settings['config_dir']\n        }\n\n        if ext_resources_dir:\n            resource_dict['metadata']['path'] = ext_resources_dir\n\n        try:\n            output, resources = exporter.from_notebook_node(\n                nb,\n                resources=resource_dict\n            )\n        except Exception as e:\n            self.log.exception(\"nbconvert failed: %s\", e)\n            raise web.HTTPError(500, \"nbconvert failed: %s\" % e)\n\n        if respond_zip(self, name, output, resources):\n            return\n\n        # Force download if requested\n        if self.get_argument('download', 'false').lower() == 'true':\n            filename = os.path.splitext(name)[0] + resources['output_extension']\n            self.set_attachment_header(filename)\n\n        # MIME type\n        if exporter.output_mimetype:\n            self.set_header('Content-Type',\n                            '%s; charset=utf-8' % exporter.output_mimetype)\n\n        self.set_header('Cache-Control', 'no-store, no-cache, must-revalidate, max-age=0')\n        self.finish(output)\n\nclass NbconvertPostHandler(IPythonHandler):\n    SUPPORTED_METHODS = ('POST',)\n\n    @property\n    def content_security_policy(self):\n        # In case we're serving HTML/SVG, confine any Javascript to a unique\n        # origin so it can't interact with the notebook server.\n        return super(NbconvertPostHandler, self).content_security_policy + \\\n               \"; sandbox allow-scripts\"\n\n    @web.authenticated\n    def post(self, format):\n        exporter = get_exporter(format, config=self.config)\n\n        model = self.get_json_body()\n        name = model.get('name', 'notebook.ipynb')\n        nbnode = from_dict(model['content'])\n\n        try:\n            output, resources = exporter.from_notebook_node(nbnode, resources={\n                \"metadata\": {\"name\": name[:name.rfind('.')],},\n                \"config_dir\": self.application.settings['config_dir'],\n            })\n        except Exception as e:\n            raise web.HTTPError(500, \"nbconvert failed: %s\" % e)\n\n        if respond_zip(self, name, output, resources):\n            return\n\n        # MIME type\n        if exporter.output_mimetype:\n            self.set_header('Content-Type',\n                            '%s; charset=utf-8' % exporter.output_mimetype)\n\n        self.finish(output)\n"
}