{
    "general_rule": "Rule: Implement Input Validation and Boundary Checks\n\n1. Type of improvement:\n   Adding input validation and boundary checks for user-supplied data or external inputs.\n\n2. Benefits:\n   - Enhances security by preventing potential attacks or unexpected behavior\n   - Improves reliability by handling edge cases and invalid inputs gracefully\n   - Reduces the risk of resource exhaustion or performance issues\n   - Provides clearer error messages for debugging and user feedback\n\n3. How to identify similar opportunities:\n   - Look for functions or methods that accept external inputs\n   - Review areas where data is read from files, networks, or user interfaces\n   - Examine places where assumptions are made about input size or format\n   - Check for missing error handling or overly permissive input processing\n\n4. General application:\n   - Define clear limits and expectations for input data\n   - Validate input types, ranges, and formats before processing\n   - Implement appropriate error handling for invalid inputs\n   - Consider potential security implications of unchecked inputs\n   - Use language-specific or framework-provided validation tools when available\n   - Apply the principle of \"fail fast\" by checking inputs early in the process"
}