{
    "general_rule": "Rule: Optimize Conditional Logic for Improved Performance and Readability\n\n1. Type of Improvement:\n   Simplify and optimize conditional logic by extracting complex conditions into separate, well-named methods.\n\n2. Benefits:\n   - Improves code readability by making the main logic flow clearer\n   - Enhances maintainability by isolating specific checks\n   - Potentially improves performance by reducing redundant calculations\n   - Facilitates easier testing of individual conditions\n\n3. How to Identify Opportunities:\n   - Look for complex if-statements with multiple conditions\n   - Identify repeated patterns of string or path comparisons\n   - Search for long method bodies with multiple nested conditions\n   - Find areas where the same calculations are performed multiple times\n\n4. General Application:\n   - Extract complex conditions into separate, descriptive methods\n   - Use meaningful names for these new methods to self-document the code\n   - Consider caching results of expensive calculations if used multiple times\n   - Refactor large methods into smaller, more focused functions\n   - Use early returns or guard clauses to simplify the main logic flow\n   - Apply this principle across different layers of the application (e.g., controllers, services, data access)\n\nThis optimization technique can be applied to various programming languages and project types, improving overall code quality and maintainability."
}