{
    "general_rule": "Rule: Simplify and Remove Unnecessary Complexity\n\n1. Type of improvement:\n   Removal of unused or overly complex code that doesn't contribute to the core functionality of the class or module.\n\n2. Benefits:\n   - Improved code readability and maintainability\n   - Reduced cognitive load for developers\n   - Smaller codebase, leading to faster compilation and potentially better performance\n   - Decreased risk of bugs and security vulnerabilities in unused code\n\n3. How to identify similar opportunities:\n   - Look for methods or classes with a lot of commented-out code\n   - Identify unused imports, variables, or methods\n   - Search for overly complex implementations of simple functionality\n   - Review error handling and logging that may be excessive or unnecessary\n   - Examine custom implementations of standard library functions or third-party libraries\n\n4. General application:\n   When reviewing code, always question whether each component is necessary for the current requirements. If a piece of code doesn't serve a clear purpose or if its complexity outweighs its benefits, consider removing or simplifying it. Regularly refactor code to keep it lean and focused on core functionality. Prefer using well-established libraries and frameworks instead of custom implementations for common tasks, unless there's a compelling reason to do otherwise."
}