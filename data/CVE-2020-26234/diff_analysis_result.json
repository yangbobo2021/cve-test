{
    "before_functions": "/** client used for all http requests. */\nprivate DefaultHttpClient defaultHttpClient = makeHttpClient();\n\n/**\n * Creates a new client that can deal with all kinds of oddities with regards to http/https connections.\n *\n * @return the client\n */\nprivate DefaultHttpClient makeHttpClient() {\n\n  DefaultHttpClient defaultHttpClient = new DefaultHttpClient();\n  try {\n    logger.debug(\"Installing forgiving hostname verifier and trust managers\");\n    X509TrustManager trustManager = createTrustManager();\n    X509HostnameVerifier hostNameVerifier = createHostNameVerifier();\n    SSLContext sslContext = SSLContext.getInstance(\"TLS\");\n    sslContext.init(null, new TrustManager[] { trustManager }, new SecureRandom());\n    SSLSocketFactory ssf = new SSLSocketFactory(sslContext, hostNameVerifier);\n    ClientConnectionManager ccm = defaultHttpClient.getConnectionManager();\n    SchemeRegistry sr = ccm.getSchemeRegistry();\n    sr.register(new Scheme(\"https\", 443, ssf));\n  } catch (NoSuchAlgorithmException e) {\n    logger.error(\"Error creating context to handle TLS connections: {}\", e.getMessage());\n  } catch (KeyManagementException e) {\n    logger.error(\"Error creating context to handle TLS connections: {}\", e.getMessage());\n  }\n\n  return defaultHttpClient;\n}\n",
    "after_functions": "/** client used for all http requests. */\nprivate DefaultHttpClient defaultHttpClient = new DefaultHttpClient();\n"
}