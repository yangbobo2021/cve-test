{
    "before_functions": "public function showEmailLogAction(Request $request, ?Profiler $profiler)\n{\n    if($profiler) {\n        $profiler->disable();\n    }\n\n    if (!$this->getAdminUser()->isAllowed('emails')) {\n        throw new \\Exception(\"Permission denied, user needs 'emails' permission.\");\n    }\n\n    $type = $request->get('type');\n    $emailLog = Tool\\Email\\Log::getById($request->get('id'));\n\n    if ($request->get('type') == 'text') {\n        $templatingEnginePhp = $this->get('pimcore.templating.engine.php');\n\n        return new Response('<html><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /><style>body{background-color:#fff;}</style></head><body><pre>' . $templatingEnginePhp->escape($emailLog->getTextLog()) . '</pre></body></html>');\n    } elseif ($request->get('type') == 'html') {\n        return new Response($emailLog->getHtmlLog());\n    } elseif ($request->get('type') == 'params') {\n        try {\n            $params = $this->decodeJson($emailLog->getParams());\n        } catch (\\Exception $e) {\n            Logger::warning('Could not decode JSON param string');\n            $params = [];\n        }\n        foreach ($params as &$entry) {\n            $this->enhanceLoggingData($entry);\n        }\n\n        return $this->adminJson($params);\n    } else {\n        return new Response('No Type specified');\n    }\n}\n",
    "after_functions": "public function showEmailLogAction(Request $request, ?Profiler $profiler)\n{\n    if($profiler) {\n        $profiler->disable();\n    }\n\n    if (!$this->getAdminUser()->isAllowed('emails')) {\n        throw new \\Exception(\"Permission denied, user needs 'emails' permission.\");\n    }\n\n    $type = $request->get('type');\n    $emailLog = Tool\\Email\\Log::getById($request->get('id'));\n\n    if ($request->get('type') == 'text') {\n        $templatingEnginePhp = $this->get('pimcore.templating.engine.php');\n\n        return new Response('<html><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /><style>body{background-color:#fff;}</style></head><body><pre>' . $templatingEnginePhp->escape($emailLog->getTextLog()) . '</pre></body></html>');\n    } elseif ($request->get('type') == 'html') {\n        return new Response($emailLog->getHtmlLog(), 200, [\n            'Content-Security-Policy' => \"default-src 'self'; style-src 'self' 'unsafe-inline'\"\n        ]);\n    } elseif ($request->get('type') == 'params') {\n        try {\n            $params = $this->decodeJson($emailLog->getParams());\n        } catch (\\Exception $e) {\n            Logger::warning('Could not decode JSON param string');\n            $params = [];\n        }\n        foreach ($params as &$entry) {\n            $this->enhanceLoggingData($entry);\n        }\n\n        return $this->adminJson($params);\n    } else {\n        return new Response('No Type specified');\n    }\n}\n"
}