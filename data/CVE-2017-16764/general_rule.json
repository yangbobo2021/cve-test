{
    "general_rule": "Rule: Use Secure Parsing Functions for Untrusted Data\n\n1. Type of Improvement:\n   Replace generic parsing functions with their secure counterparts when handling potentially untrusted data.\n\n2. Benefits:\n   - Enhances security by preventing code injection and other malicious attacks\n   - Reduces the risk of unintended code execution\n   - Improves overall application robustness and reliability\n\n3. Identifying Opportunities:\n   - Look for parsing functions that handle external data (e.g., file I/O, network requests, user inputs)\n   - Check documentation for secure alternatives to commonly used parsing functions\n   - Review security guidelines and best practices for the specific libraries or frameworks in use\n\n4. General Application:\n   This rule can be applied to various scenarios where data parsing is involved, regardless of the programming language or specific library. Always prioritize secure parsing methods when dealing with any form of external or user-supplied data to minimize security vulnerabilities."
}