{
    "general_rule": "Rule: Optimize Conditional Logic and Early Returns\n\n1. Type of improvement:\n   Simplifying conditional statements and using early returns to reduce nesting and improve readability.\n\n2. Benefits:\n   - Improves code readability by reducing complexity and nesting levels\n   - Enhances maintainability by making the logic flow more straightforward\n   - Can lead to better performance by avoiding unnecessary checks\n\n3. How to identify similar opportunities:\n   - Look for deeply nested if-else statements\n   - Identify conditions that can be checked early and returned\n   - Search for repeated conditions or redundant checks\n   - Examine long methods with multiple exit points\n\n4. General application:\n   - Reorder conditions to check for invalid or edge cases first\n   - Use guard clauses to handle special cases and return early\n   - Combine related conditions using logical operators\n   - Extract complex conditions into separate, well-named methods\n   - Consider using polymorphism or strategy pattern for complex branching logic\n\nThis rule can be applied across different programming languages and projects to improve code quality and maintainability."
}