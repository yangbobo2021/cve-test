{
    "before_functions": "var result = (function walk (node) {\n    // ... (other cases remain the same)\n\n    else if (node.type === 'MemberExpression') {\n        var obj = walk(node.object);\n        if (obj === FAIL) return FAIL;\n        if (node.property.type === 'Identifier') {\n            return obj[node.property.name];\n        }\n        var prop = walk(node.property);\n        if (prop === FAIL) return FAIL;\n        return obj[prop];\n    }\n\n    // ... (other cases remain the same)\n\n    else if (node.type === 'FunctionExpression') {\n        var keys = Object.keys(vars);\n        var vals = keys.map(function(key) {\n            return vars[key];\n        });\n        return Function(keys.join(', '), 'return ' + unparse(node)).apply(null, vals);\n    }\n\n    // ... (rest of the function remains the same)\n})(ast);\n",
    "after_functions": "var result = (function walk (node, scopeVars) {\n    // ... (other cases remain the same)\n\n    else if (node.type === 'MemberExpression') {\n        var obj = walk(node.object);\n        // do not allow access to methods on Function \n        if((obj === FAIL) || (typeof obj == 'function')){\n            return FAIL;\n        }\n        if (node.property.type === 'Identifier') {\n            return obj[node.property.name];\n        }\n        var prop = walk(node.property);\n        if (prop === FAIL) return FAIL;\n        return obj[prop];\n    }\n\n    // ... (other cases remain the same)\n\n    else if (node.type === 'ExpressionStatement') {\n        var val = walk(node.expression)\n        if (val === FAIL) return FAIL;\n        return val;\n    }\n    else if (node.type === 'ReturnStatement') {\n        return walk(node.argument)\n    }\n    else if (node.type === 'FunctionExpression') {\n        var bodies = node.body.body;\n        \n        // Create a \"scope\" for our arguments\n        var oldVars = {};\n        Object.keys(vars).forEach(function(element){\n            oldVars[element] = vars[element];\n        })\n\n        node.params.forEach(function(key) {\n            if(key.type == 'Identifier'){\n              vars[key.name] = null;\n            }\n        });\n        for(var i in bodies){\n            if(walk(bodies[i]) === FAIL){\n                return FAIL;\n            }\n        }\n        // restore the vars and scope after we walk\n        vars = oldVars;\n        \n        var keys = Object.keys(vars);\n        var vals = keys.map(function(key) {\n            return vars[key];\n        });\n        return Function(keys.join(', '), 'return ' + unparse(node)).apply(null, vals);\n    }\n\n    // ... (rest of the function remains the same)\n})(ast);\n"
}