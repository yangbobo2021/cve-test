{
    "general_rule": "Rule: Implement Proper Scoping and Variable Management\n\n1. Type of Improvement:\n   Enhance variable scoping and management within functions and nested structures.\n\n2. Benefits:\n   - Improves code organization and readability\n   - Reduces the risk of unintended variable modifications\n   - Enhances security by limiting access to variables\n   - Facilitates easier debugging and maintenance\n   - Potentially improves performance by optimizing variable lookups\n\n3. Identifying Opportunities:\n   - Look for functions or blocks that use variables from outer scopes\n   - Identify areas where variables are shared across multiple nested levels\n   - Check for potential naming conflicts or overwriting of variables\n   - Review code that deals with sensitive data or security-critical operations\n   - Examine recursive or complex nested structures for variable management issues\n\n4. General Application:\n   - Implement proper variable scoping mechanisms (e.g., block-scoping, closures)\n   - Use local variables instead of relying on outer scope variables when possible\n   - Create new scopes for nested structures or loops to isolate variables\n   - Implement a system to manage and restore variable states in recursive operations\n   - Use immutable data structures or const/final declarations where appropriate\n   - Consider using design patterns that promote encapsulation and data hiding\n   - Regularly review and refactor code to ensure proper scoping and variable management"
}