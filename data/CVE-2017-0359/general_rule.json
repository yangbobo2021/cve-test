{
    "general_rule": "Rule: Optimize Data Storage and Retrieval for Improved Performance and Memory Usage\n\n1. Type of Improvement:\n   Replace inefficient data structures with more appropriate ones that better suit the access patterns and requirements of the application.\n\n2. Benefits:\n   - Reduces memory usage by eliminating redundant data storage\n   - Improves performance by providing faster access to frequently used data\n   - Simplifies code by centralizing data management\n   - Enhances maintainability by reducing the need for complex data manipulation\n\n3. How to Identify Similar Opportunities:\n   - Look for repeated data storage or extraction operations\n   - Analyze data access patterns in the codebase\n   - Identify areas where multiple data structures are used to represent related information\n   - Look for operations that require frequent data transformations or conversions\n\n4. General Application:\n   - Evaluate the current data structures used in the codebase\n   - Consider alternative data structures that may better suit the application's needs\n   - Implement a centralized data management system when appropriate\n   - Use built-in language features or libraries that provide efficient data handling\n   - Optimize for the most common operations in your application\n   - Balance memory usage with performance requirements\n   - Ensure that the chosen data structure supports all required operations efficiently"
}