{
    "general_rule": "Rule: Expand supported formats and protocols to improve compatibility and user experience\n\n1. Type of improvement:\n   Adding support for additional file formats, protocols, or standards that are commonly used or becoming more prevalent in the target environment.\n\n2. Benefits:\n   - Enhances compatibility with a wider range of systems and user preferences\n   - Improves user experience by supporting more modern or efficient formats\n   - Keeps the software up-to-date with current technology trends\n   - Potentially increases the user base by accommodating more use cases\n\n3. How to identify similar opportunities:\n   - Review lists of supported formats, protocols, or standards in the codebase\n   - Research current trends and popular formats in the relevant domain\n   - Analyze user feedback and feature requests for mentions of unsupported formats\n   - Check compatibility with other systems or software in the same ecosystem\n   - Review industry standards and best practices for potential additions\n\n4. General applicability:\n   This rule can be applied to various types of software projects, including:\n   - File handling systems\n   - Communication protocols\n   - Data exchange formats\n   - API integrations\n   - User interface components\n   - Configuration options\n\nWhen implementing this rule, consider the following:\n   - Ensure backward compatibility with existing supported formats\n   - Evaluate the impact on performance and resource usage\n   - Update documentation and user guides to reflect new support\n   - Implement proper error handling and validation for new formats\n   - Consider security implications of supporting additional formats or protocols"
}