{
    "general_rule": "Rule: Implement Input Sanitization for User-Facing Data\n\n1. Type of Improvement:\n   This change focuses on enhancing security by sanitizing user-supplied or dynamically generated data before displaying it in the user interface.\n\n2. Benefits:\n   - Prevents potential Cross-Site Scripting (XSS) attacks\n   - Improves the overall security posture of the application\n   - Ensures that malicious code cannot be injected into the UI\n   - Maintains the integrity of displayed information\n\n3. Identifying Similar Opportunities:\n   - Look for instances where data is directly inserted into UI elements\n   - Pay attention to areas where user input or external data is displayed\n   - Review code that constructs HTML or UI components dynamically\n   - Focus on methods that set text or content for UI components\n\n4. General Application:\n   - Use appropriate sanitization methods provided by your framework or language\n   - Apply sanitization before setting any dynamic content in the UI\n   - Consider implementing a centralized sanitization utility for consistent use\n   - Be especially vigilant with data that comes from external sources or user input\n   - Regularly audit code for places where sanitization might have been overlooked\n   - Include input sanitization in code review checklists and security guidelines\n\nNote: While this rule focuses on UI-related sanitization, the principle of sanitizing input applies to many areas of software development, including database queries, file operations, and any scenario where external data is processed or displayed."
}