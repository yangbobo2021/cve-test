{
    "general_rule": "Rule: Simplify Regular Expressions\n\n1. Type of improvement: \n   Simplifying and optimizing regular expressions used in the code.\n\n2. Benefits:\n   - Improved performance by reducing regex complexity\n   - Enhanced readability and maintainability\n   - Reduced risk of regex-related bugs\n\n3. How to identify opportunities:\n   - Look for complex regular expressions with many optional parts\n   - Identify regexes that are used frequently in performance-critical sections\n   - Review regexes that have been expanded over time to handle edge cases\n\n4. General approach:\n   - Analyze the regex to understand its purpose\n   - Identify redundant or overly complex parts\n   - Simplify by removing unnecessary character classes or quantifiers\n   - Consider breaking very complex regexes into multiple simpler ones\n   - Test thoroughly to ensure the simplified regex still covers all required cases\n   - Benchmark before and after to confirm performance improvement\n\nThis optimization can be applied to any codebase that uses regular expressions, regardless of programming language. It's especially valuable in data processing, text parsing, and input validation scenarios."
}