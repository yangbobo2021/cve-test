{
    "general_rule": "Rule: Optimize Regular Expression Patterns for Improved Performance\n\n1. Type of Improvement:\n   Refine regular expression patterns to be more specific and efficient.\n\n2. Benefits:\n   - Improved performance by reducing unnecessary pattern matching\n   - Enhanced security by preventing unintended matches\n   - Clearer intent of the pattern's purpose\n\n3. How to Identify Similar Opportunities:\n   - Review regular expressions used for input validation or parsing\n   - Look for patterns that might be too broad or lack proper anchors\n   - Examine performance-critical sections of code that involve string matching\n\n4. General Application:\n   - Add start (^) and end ($) anchors to patterns when full string matching is required\n   - Use more specific character classes or quantifiers instead of overly broad ones\n   - Consider the balance between pattern flexibility and performance requirements\n   - Test modified patterns thoroughly to ensure they still cover all valid use cases\n   - Use regex testing tools to analyze and optimize complex patterns\n   - Document the purpose and constraints of each regex pattern for future maintenance\n\nThis optimization can be applied across various programming languages and projects \nthat use regular expressions for string matching, parsing, or validation. Always \nconsider the specific requirements and performance needs of your application when \nimplementing this rule."
}