{
    "before_functions": "protected boolean evaluate(InputSource inputSource) {\n    try {\n        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n        factory.setNamespaceAware(true);\n        DocumentBuilder dbuilder = factory.newDocumentBuilder();\n        Document doc = dbuilder.parse(inputSource);\n\n        //An XPath expression could return a true or false value instead of a node.\n        //eval() is a better way to determine the boolean value of the exp.\n        //For compliance with legacy behavior where selecting an empty node returns true,\n        //selectNodeIterator is attempted in case of a failure.\n\n        CachedXPathAPI cachedXPathAPI = new CachedXPathAPI();\n        XObject result = cachedXPathAPI.eval(doc, xpath);\n        if (result.bool())\n            return true;\n        else {\n            NodeIterator iterator = cachedXPathAPI.selectNodeIterator(doc, xpath);\n            return (iterator.nextNode() != null);\n        }\n\n    } catch (Throwable e) {\n        return false;\n    }\n}\n",
    "after_functions": "protected boolean evaluate(InputSource inputSource) {\n    try {\n        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n        factory.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);\n        factory.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false);\n        factory.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n        setupFeatures(factory);\n        factory.setNamespaceAware(true);\n        factory.setIgnoringElementContentWhitespace(true);\n        factory.setIgnoringComments(true);\n        DocumentBuilder dbuilder = factory.newDocumentBuilder();\n        Document doc = dbuilder.parse(inputSource);\n\n        //An XPath expression could return a true or false value instead of a node.\n        //eval() is a better way to determine the boolean value of the exp.\n        //For compliance with legacy behavior where selecting an empty node returns true,\n        //selectNodeIterator is attempted in case of a failure.\n\n        CachedXPathAPI cachedXPathAPI = new CachedXPathAPI();\n        XObject result = cachedXPathAPI.eval(doc, xpath);\n        if (result.bool())\n            return true;\n        else {\n            NodeIterator iterator = cachedXPathAPI.selectNodeIterator(doc, xpath);\n            return (iterator.nextNode() != null);\n        }\n\n    } catch (Throwable e) {\n        return false;\n    }\n}\n\nprotected void setupFeatures(DocumentBuilderFactory factory) {\n    Properties properties = System.getProperties();\n    List<String> features = new ArrayList<String>();\n    for (Map.Entry<Object, Object> prop : properties.entrySet()) {\n        String key = (String) prop.getKey();\n        if (key.startsWith(DOCUMENT_BUILDER_FACTORY_FEATURE)) {\n            String uri = key.split(DOCUMENT_BUILDER_FACTORY_FEATURE + \":\")[1];\n            Boolean value = Boolean.valueOf((String)prop.getValue());\n            try {\n                factory.setFeature(uri, value);\n                features.add(\"feature \" + uri + \" value \" + value);\n            } catch (ParserConfigurationException e) {\n                throw new RuntimeException(\"DocumentBuilderFactory doesn't support the feature \" + uri + \" with value \" + value + \", due to \" + e);\n            }\n        }\n    }\n    if (features.size() > 0) {\n        StringBuffer featureString = new StringBuffer();\n        // just log the configured feature\n        for (String feature : features) {\n            if (featureString.length() != 0) {\n                featureString.append(\", \");\n            }\n            featureString.append(feature);\n        }\n    }\n}\n"
}