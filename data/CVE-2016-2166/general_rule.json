{
    "general_rule": "Rule: Consolidate Error Handling and Resource Management\n\n1. Type of improvement: \n   Centralizing error handling and resource management logic\n\n2. Benefits:\n   - Reduces code duplication\n   - Improves consistency in how errors and resources are handled\n   - Makes the code more maintainable and easier to update\n   - Can improve performance by reducing redundant checks\n\n3. How to identify opportunities:\n   - Look for repeated error checking patterns throughout the codebase\n   - Identify similar resource initialization and cleanup code in multiple places\n   - Notice scattered logging or error reporting calls\n   - Find multiple implementations of retry logic or connection management\n\n4. General application:\n   - Create centralized error handling functions or classes\n   - Implement resource management using context managers or similar language constructs\n   - Use decorators or aspects to apply consistent error handling\n   - Create reusable components for common patterns like connection management\n   - Utilize language features for structured error handling where available\n   - Consider using a logging framework to centralize logging logic"
}