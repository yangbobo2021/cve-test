{
    "before_functions": "def _connect(self, connection):\n    url = self.address.next()\n    # IoHandler uses the hostname to determine where to try to connect to\n    connection.hostname = \"%s:%s\" % (url.host, url.port)\n    logging.info(\"connecting to %s...\" % connection.hostname)\n\n    transport = Transport()\n    if self.sasl_enabled:\n        sasl = transport.sasl()\n        sasl.allow_insecure_mechs = self.allow_insecure_mechs\n        if url.username:\n            connection.user = url.username\n        elif self.user:\n            connection.user = self.user\n        if url.password:\n            connection.password = url.password\n        elif self.password:\n            connection.password = self.password\n        if self.allowed_mechs:\n            sasl.allowed_mechs(self.allowed_mechs)\n    transport.bind(connection)\n    if self.heartbeat:\n        transport.idle_timeout = self.heartbeat\n    if url.scheme == 'amqps' and self.ssl_domain:\n        self.ssl = SSL(transport, self.ssl_domain)\n        self.ssl.peer_hostname = url.host\n\ndef listen(self, url, ssl_domain=None):\n    \"\"\"\n    Initiates a server socket, accepting incoming AMQP connections\n    on the interface and port specified.\n    \"\"\"\n    url = Url(url)\n    acceptor = self.acceptor(url.host, url.port)\n    ssl_config = ssl_domain\n    if not ssl_config and url.scheme == 'amqps' and self.ssl:\n        ssl_config = self.ssl.server\n    if ssl_config:\n        acceptor.set_ssl_domain(ssl_config)\n    return acceptor\n",
    "after_functions": "def _connect(self, connection):\n    url = self.address.next()\n    # IoHandler uses the hostname to determine where to try to connect to\n    connection.hostname = \"%s:%s\" % (url.host, url.port)\n    logging.info(\"connecting to %s...\" % connection.hostname)\n\n    transport = Transport()\n    if self.sasl_enabled:\n        sasl = transport.sasl()\n        sasl.allow_insecure_mechs = self.allow_insecure_mechs\n        if url.username:\n            connection.user = url.username\n        elif self.user:\n            connection.user = self.user\n        if url.password:\n            connection.password = url.password\n        elif self.password:\n            connection.password = self.password\n        if self.allowed_mechs:\n            sasl.allowed_mechs(self.allowed_mechs)\n    transport.bind(connection)\n    if self.heartbeat:\n        transport.idle_timeout = self.heartbeat\n    if url.scheme == 'amqps':\n        if not self.ssl_domain:\n            raise SSLUnavailable(\"amqps: SSL libraries not found\")\n        self.ssl = SSL(transport, self.ssl_domain)\n        self.ssl.peer_hostname = url.host\n\ndef listen(self, url, ssl_domain=None):\n    \"\"\"\n    Initiates a server socket, accepting incoming AMQP connections\n    on the interface and port specified.\n    \"\"\"\n    url = Url(url)\n    acceptor = self.acceptor(url.host, url.port)\n    ssl_config = ssl_domain\n    if not ssl_config and url.scheme == 'amqps':\n        # use container's default server domain\n        if self.ssl:\n            ssl_config = self.ssl.server\n        else:\n            raise SSLUnavailable(\"amqps: SSL libraries not found\")\n    if ssl_config:\n        acceptor.set_ssl_domain(ssl_config)\n    return acceptor\n"
}